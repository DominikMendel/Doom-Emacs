#+TITLE: Config
#+PROPERTY: header-args+ :tangle config.el
* Header info
Just some personal information and my doom-theme.
- I have been loving doom-horizon. I wanted something in dark mode that was best for my eyes.
  + After going through all the themes I ended up on horizon.
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Dominik Mendel"
      user-mail-address "Dominikmendel95@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)
(setq doom-theme 'doom-horizon)
#+end_src
* General values and Org-journal
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org"
      org-journal-date-prefix "* "
      org-journal-enable-agenda-integration t
      org-journal-enable-cache t
      ;; org-roam-directory "~/Dropbox/org/roam"
      +org-roam-open-buffer-on-find-file nil)

(setq! org-journal-time-format "")


(after! org-journal
  (setq! org-journal-carryover-items "TODO=\"TODO\"|TODO=\"INPROGRESS\"|TODO=\"WAITING\"|TODO=\"BLOCKED\"|TODO=\"QUESTION\""))
#+end_src
* Custom functions
** Youtube url link
I wanted to extend the YouTube url link in Org Mode by including time markings. This function will concat the minutes and seconds to the end of the url link
#+begin_src elisp
(defun make-youtube-time-link (link-text)
  (let ((substrings (split-string link-text ",")))
    (browse-url (format "%s&t=%sm%ss" (first substrings) (second substrings) (third substrings)))))
#+end_src
** Clocktable function
This function is used in the ":match" parameter for an Org-clocktable. It will pull all clocked times from my entire work journal directory.
- This is very useful to record how much time I spent working on a specific project.
- I usually follow the Org-clocktable with the corresponding tag associated with the project to filter all of my total work to the work in the project I want.
  #+begin_src elisp
(defun vispero-journals() (directory-files-recursively "~/Dropbox/org/vispero/journal" "\\.org$"))

(defun personal-journals() (directory-files-recursively "~/Dropbox/org/journal" "\\.org$"))
  #+end_src
** Create linkable UUID
- Credit to Rainer König
I use this function all the time to create a UUID link to a header file so I can keep track of the link even after I archive it.
This is epsecially useful in my workflow where I would copy a task from my agenda to my journal to show that I am working on said task for the day. Later when I finish that task and archive it I still have a valid link.
#+begin_src elisp
(defun my/copy-idlink-to-clipboard() "Copy an ID link with the
headline to killring, if no ID is there then create a new unique
ID.  This function works only in org-mode or org-agenda buffers.

The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
       (interactive)
       (when (eq major-mode 'org-agenda-mode) ;if we are in agenda mode we switch to orgmode
         (org-agenda-show)
         (org-agenda-goto))
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
         (setq mytmphead (nth 4 (org-heading-components)))
         (setq mytmpid (funcall 'org-id-get-create))
         (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
         (kill-new mytmplink)
         (message "Copied %s to killring (clipboard)" mytmplink)))
(global-set-key (kbd "<f5>") 'my/copy-idlink-to-clipboard)
#+end_src
* Deft
#+begin_src elisp
(setq deft-directory "~/Dropbox/org"
      deft-extensions '("org" "txt")
      deft-recursive t)
#+end_src
* Logging
#+begin_src elisp

(setq org-startup-indented t           ;; Indent according to section
      display-line-numbers-type t
      org-log-reschedule t
      org-log-into-drawer t
      org-enforce-todo-checkbox-dependencies t)

(add-hook 'before-save-hook 'org-update-all-dblocks())
#+end_src
* Fonts
#+begin_src elisp
(setq doom-font (font-spec :family "Fira Code Retina" :size 15)
      doom-variable-pitch-font (font-spec :family "JuliaMono Medium" :size 15)
      doom-big-font (font-spec :family "Fira Code Retina" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
* Org
** Generl org
#+begin_src elisp
(after! org
  (setq org-startup-folded t)
  (setq org-ellipsis " ▼ ")
  (setq org-hide-emphasis-markers t)
  (add-to-list 'org-modules 'org-checklist)
  (require 'org-checklist)
  (setq org-sparse-tree-open-archived-trees t) ;;For finding archived headings
  (setq org-clock-into-drawer "CLOCKING")
  (org-add-link-type "yt" #'make-youtube-time-link)
  (setq org-todo-keywords
        '((sequence  "TODO(t)" "INPROGRESS(i!)" "IN-REVIEW(r!)" "NEXT(n!)" "WAITING(w@/!)" "BLOCKED(b@/!)" "SOMEDAY(s!)" "|" "DONE(d@)" "CANCELLED(c!)" "ABANDONED(a@)")
          (sequence "QUESTION(q)" "|" "ANSWERED(@/!)")
          (sequence "REPEAT" "|" "COMPLETED")
          (sequence "[ ](T)" "[-](I)" "[?](?)" "|" "[X](D)")))
  (setq org-log-done 'time)
  (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 2))))

  )
#+end_src
** Org-capture-templates
- %a allows for a link inserted from the file/headline you are currently at and inserts it into the capture
- %A is the same as %a but prompts for a description of the link
#+begin_src elisp
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  (unless (eq org-journal-file-type 'daily)
    (org-narrow-to-subtree))
  (goto-char (point-max)))

(after! org
  (setq org-capture-templates
        '(
          ("t" "General ToDo" entry (file+headline +org-capture-todo-file "Tasks")
           "* TODO %?\n %i\n")

          ("i" "General Inprogress" entry (file+headline +org-capture-todo-file "Tasks")
           "* INPROGRESS %?\n %i\n")

          ("p" "General Project" entry (file+headline +org-capture-todo-file "Projects")
           "* TODO %?\n %i\n%a\n")

          ("j" "Journal")
          ;; ("jj" "Journal New Entry" plain (function org-journal-find-location)
          ;;  ;; "** %(format-time-string org-journal-time-format)%^{Title}%i%?"
          ;;  "** %(format-time-string org-journal-time-format)%i%?"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish nil
          ;;  :unnarrowed nil)

          ;; ("jt" "Journal New Clock Entry" plain (function org-journal-find-location)
          ;;  "** %(format-time-string org-journal-time-format)%i%?"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish nil
          ;;  :clock-in t)

          ;; Testing by removing %i
          ("jj" "Journal New Entry" plain (function org-journal-find-location)
           ;; "** %(format-time-string org-journal-time-format)%^{Title}%i%?"
           "** %(format-time-string org-journal-time-format)%?"
           :jump-to-captured nil
           :immediate-finish nil
           :unnarrowed nil)

          ("jt" "Journal New Clock Entry" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%?"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jm" "Journal New Meeting" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%^{Select Meeting|Standup|Embedded Software Team|CAP Schedule Review|Embedded Software Knowledge Sharing|Technical Brief - One on One with Rob|Townhall}%? :meeting:"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jr" "Journal Review" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Review %^{prompt} for %^{prompt}%? :review:"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jh" "Journal Helping" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Helping %^{prompt}%? :helping:"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ;; ("jm" "Journal Meetings")
          ;; ("jme" "Embedded Software Team" plain (function org-journal-find-location)
          ;;  "** %(format-time-string org-journal-time-format)Embedded Software Team :meeting:"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish t
          ;;  :clock-in t)


          ("s" "Specific location")
          ("sp" "Personal")
          ("spt" "todoDOM" entry (file+headline "~/Dropbox/org/roam/personal_agenda.org" "Tasks")
           "* TODO %?\n %i\n")
          ;; :empty-lines-before 1)
          ;; :prepend t)
          ;; :headline "Test"
          ;; :type entry
          ;; :template ("* %?" "%i %a"))

          ("sw" "Work")
          ("swt" "Work General ToDo" entry (file+headline "~/Dropbox/org/roam/vispero/vispero_agenda.org" "Tasks")
           "* TODO %?\n %i\n")

          ("swp" "Work Project" entry (file+headline "~/Dropbox/org/roam/vispero/vispero_agenda.org" "Projects")
           "* TODO %?\n %i\n%a\n")

          )))
#+end_src
** Org Agenda
#+begin_src elisp
(after! org-agenda
  (add-to-list 'org-agenda-bulk-custom-functions
               '(?a org-agenda-archive-to-archive-sibling)))
#+end_src
** Org-super-agenda
- Types of agenda custom command keywords: ([[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][link]])
  The desired agenda display/search. The options include agenda, todo, search, tags, alltodo, tags-todo, todo-tree, tags-tree, occur-tree, or a user-defined function.
#+begin_src elisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-timestamp-if-done t
;; (setq org-agenda-skip-scheduled-if-done t
;;       org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)

(setq org-super-agenda-header-map (make-sparse-keymap)) ;;Needed for evil keys in org-super-agenda
(after! org
  (setq org-agenda-custom-commands
        '(
          ("ot" "Overview test"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t
                            :date today
                            :todo "TODAY"
                            :scheduled today
                            :order 1)))))
            ;; (tags "question" ((org-agenda-overriding-header "")
            (tags "." ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Questions"
                           ;; '((
                           :tag "question"
                           ;; :anything t
                           ;; :auto-tags t
                           :order 12)
                          (:discard (:anything t))
                          ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         ;; (tags-todo "." ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Next to do"
                             :todo "NEXT"
                             :order 4)
                            (:name "Due Today"
                             :deadline today
                             :order 2)
                            (:name "Important"
                             :tag "Important"
                             :priority "A"
                             :order 6)
                            (:name "Due Soon"
                             :deadline future
                             :order 8)
                            (:name "Overdue"
                             :deadline past
                             :face error
                             :order 7)
                            (:name "Inprogress"
                             :todo "INPROGRESS"
                             :order 3)
                            (:name "Questions"
                             ;; :regexp (:todo "QUESTION" :tag "question")
                             :todo "QUESTION"
                             :tag "question"
                             :order 10)
                            (:name "Questions tags"
                             :tag "question"
                             :order 11)
                            (:name "Projects"
                             :tag "Project"
                             :order 15)
                            (:name "In review"
                             :todo "IN-REVIEW"
                             :order 14)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 20)
                            (:name "Some day"
                             :todo "SOMEDAY"
                             :order 25)
                            (:name "Done"
                             :todo "DONE"
                             :order 26)
                            (:name "Trivial"
                             :priority<= "C"
                             :tag ("Trivial" "Unimportant")
                             :todo ("SOMEDAY")
                             :order 90)
                            (:name "Everything else"
                             :anything t
                             :auto-tags t
                             :order 89)
                            ;; (:name "Random shit"
                            ;;  :auto-tags t
                            ;;  :priority<= "C"
                            ;;  :order 89)
                            (:discard (:tag ("Chore" "Routine" "Daily")))
                            ))))))


          ("p" "Projects"
           ;; (
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t
                            :date today
                            :todo "TODAY"
                            :scheduled today
                            :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          `((:name "WAITING"
                             :children "WAITING"
                             :order 2)
                            (:discard (:anything t)))
                          )))))

          ("w" "Weekly review"
           ((alltodo "" ((org-agenda-overriding-header "")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexpt "^\\*\\* DONE"))))))
          ;; ))))
          ))

  )

;; '(
;;   ("o" "Overview")
;;   ("ot" "Overview Test"
;; ((agenda "" ((org-agenda-span 'day)
;;              (org-super-agenda-groups
;;               '((:name "Today"
;;                  :time-grid t
;;                  :date today
;;                  :todo "TODAY"
;;                  :scheduled today
;;                  :order 1)))))
;;  (alltodo "" ((org-agenda-overriding-header "")
;;               (org-super-agenda-groups
;;                '((:name "Next to do"
;;                   :todo "NEXT"
;;                   :order 4)
;;                  (:name "Important"
;;                   :tag "Important"
;;                   :priority "A"
;;                   :order 6)
;;                  (:name "Due Today"
;;                   :deadline today
;;                   :order 2)
;;                  (:name "Due Soon"
;;                   :deadline future
;;                   :order 8)
;;                  (:name "Overdue"
;;                   :deadline past
;;                   :face error
;;                   :order 7)
;;                  (:name "Projects"
;;                   :tag "Project"
;;                   :order 10)
;;                  (:name "Questions"
;;                   :todo "QUESTION"
;;                   :order 15)
;;                  (:name "Inprogress"
;;                   :todo "INPROGRESS"
;;                   :order 3)
;;                  (:name "In review"
;;                   :todo "IN-REVIEW"
;;                   :order 14)
;;                  (:name "Waiting"
;;                   :todo "WAITING"
;;                   :order 20)
;;                  (:name "Some day"
;;                   :todo "SOMEDAY"
;;                   :order 25)
;;                  (:name "Trivial"
;;                   :priority<= "C"
;;                   :tag ("Trivial" "Unimportant")
;;                   :todo ("SOMEDAY")
;;                   :order 90)
;;                  (:discard (:tag ("Chore" "Routine" "Daily")))))))))))

;; (setq org-agenda-custom-commands
;;       '(("A" . "Agendas")
;;         ("AT" "Daily Overview"
;;          (agenda "" (org-agenda-span 'day)
;;                  (org-super-agenda-groups
;;                   '((:name "Today"
;;                      :time-grid t
;;                      :date today
;;                      :todo "INPROGRESS")))))

;;         ("AW" "Weekly Overview"
;;          (org-agenda-span 'week))

;;         ))

;; (after! org-capture
;;   (setq org-capture-templates
;;   ;; (add-to-list 'org-capture-templates
;;         '("T" "Todo" entry (file+headline "~/Dropbox/org/roam/vispero/vispero_agenda.org" "Tasks")
;;           "* TODO %?\n %i\n %a")))
;; (use-package! org-super-agenda
;;   :commands (org-super-agenda-moda))
;; (after! org-agenda
;;   (org-super-agenda-mode))

;; (setq org-agenda-skip-scheduled-if-done t
;;       org-agenda-skip-deadline-if-done t
;;       org-agenda-include-deadlines t
;;       org-agenda-block-separator nil
;;       org-agenda-tags-column 100 ;; from testing this seems to be a good value
;;       org-agenda-compact-blocks t)
#+end_src
** Org-roam
#+begin_src elisp
(after! org-roam
  (org-roam-db-build-cache ())

  (setq org-roam-directory "~/Dropbox/org/roam"
        org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           ;; "%?"
           :file-name "${slug}"
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags ::  %?\n* "
           :unnarrowed t)

          ("a" "New Area" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags :: [[file:../../../Dropbox/org/roam/indexes.org][Indexes]]"
           :unnarrowed t)

          ("r" "Reading General")
          ("rr" "Reading" plain (function org-roam--capture-get-point)
           :file-name "${slug}"
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags ::  %?\n* Notes\n* Overview"
           :unnarrowed t)

          ("rc" "Reading Character" plain (function org-roam--capture-get-point)
           :file-name "${slug}"
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags ::  %?\n* Notes\n* Mentions"
           :unnarrowed t)

          ("j" "Japanese")
          ("jj" "Japanese Vocabulary" plain (function org-roam--capture-get-point)
           :file-name "${slug}"
           :head "#+TITLE: ${title}\n#+roam_tags: %^{prompt}\n- tags :: [[file:../../../Dropbox/org/roam/japanese.org][Japanese]]\n* Definition"
           "%?"
           :unnarrowed t)

          ("jk" "Japanese Kanji" plain (function org-roam--capture-get-point)
           :file-name "${slug}"
           :head "#+TITLE: ${title}\n#+roam_tags: %^{prompt}\n- tags :: [[file:../../../Dropbox/org/roam/japanese.org][Japanese]]\n* Readings\n** onyomi %?\n** kunyomi"
           :unnarrowed t)

          ("t" "Test")
          ("tt" "Test test" plain (function org-roam--capture-get-point)
           ;; :file-name (test-directory-string "testingbuhhNameDontMatter")
           ;; :file-name (test-directory-string "${slug}")
           ;; :file-name (test-directory-multiple "%y" "%m" "%d" "${slug}")
           :function (test-directory-multiple "y" "m" "d" "slug")
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags ::  %?"
           :unnarrowed t)


          ("v" "Vispero")
          ("vv" "Vispero Default" plain (function org-roam--capture-get-point)
           :file-name "vispero/${slug}"
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags ::  %?"
           :unnarrowed t)
          ("vt" "Vispero Tagged" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "vispero/${slug}"
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags :: [[file:~/Dropbox/org/roam/vispero.org][Vispero]] "
           :unnarrowed t)
          ("vb" "Vispero Bug" plain (function org-roam--capture-get-point)
           :file-name "vispero/Bug ${slug}"
           :head "#+TITLE: Bug ${title}\n#+roam_key: http://bugzilla.fsi.local/show_bug.cgi?id=${slug}\n#+roam_alias: ${slug}\n- tags :: [[file:~/Dropbox/org/roam/vispero_bugzilla.org][Vispero Bugzilla]] \n"
           "%?"
           :unnarrowed t)
          ))

  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain #'org-roam-capture--get-point "%?"
           :file-name "website/%(url-host (url-generic-parse-url \"${ref}\"))-${slug}"
           :head "#+TITLE: ${title}\n#+roam_key: ${ref}\n- tags ::  "
           :unnarrowed t))))
#+end_src
* Org visuals
** Org Superstar
Don't need anymore. It is included in org +pretty
#+begin_src elisp
;; (use-package org-superstar  ;; Improved version of org-bullets
;;   :ensure t
;;   :config
;;   (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src
** Org-fancy-priorities
Don't need anymore. It is included in org +pretty
#+begin_src elisp
;; (use-package org-fancy-priorities
;;   :ensure t
;;   :hook
;;   (org-mode . org-fancy-priorities-mode)
;;   :config
;;   (setq org-fancy-priorities-list '("❗" "⬆" "⬇" "☕")))



;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* Key mappings
#+begin_src elisp
(map! :leader
      "w /" #'evil-window-vsplit
      "w -" #'evil-window-split
      "RET" #'org-insert-subheading
      "k" #'org-previous-visible-heading
      "K" #'outline-up-heading
      "j" #'org-next-visible-heading
      ;; "J" #'(lambda () (interactive) (call-interactively #'outline-up-heading) (call-interactively #'org/insert-item-below))
      ;; "J" #'(lambda () (interactive) (call-interactively #'outline-up-heading) (#'org/insert-item-below 1))
      "J" #'outline-back-to-heading
      "I" #'org-roam-insert
      )

(map! :after org-journal
      :map org-journal-mode-map
      :localleader
      "c" 'nil
      )

(map!
 :after org-journal
 :map org-journal-mode-map
 :localleader
 (:prefix ("c" . "clock")
  "c" #'org-clock-cancel
  "l" #'+org/toggle-last-clock
  "i" #'org-clock-in
  "I" #'org-clock-in-last
  "o" #'org-clock-out
  "r" #'org-resolve-clocks
  "R" #'org-clock-report
  "t" #'org-evaluate-time-range
  )
 )

(map! :n "," (cmd! (push (cons t ?m) unread-command-events)
                   (push (cons t 32) unread-command-events)))

;; (map! :localleader
;; "j j" #'(lambda () (interactive) (call-interactively) (outline-up-heading) (org/insert-item-below)))
;; "j j" #'(lambda () (interactive) (call-interactively #'outline-up-heading) (call-interactively #'org/insert-item-below))
;; "j k" #'outline-up-heading)
#+end_src
* Unused functions
#+begin_src elisp :tangle no
  ;; This allows refile targets in the same buffer:
  (defun +org/opened-buffer-files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))

  (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))
#+end_src
** Checkbox attempts
#+begin_src elisp :tangle no
;;Reset checkboxes from Rainer
(defun org-reset-checkbox-state-maybe ()
  "Reset all checkboxes in an entry if the `RESET_CHECK_BOXES' property is set"
  (interactive "*")
  (if (org-entry-get (point) "RESET_CHECK_BOXES")
      (org-reset-checkbox-state-subtree)))

(defun org-checklist ()
  (when (member org-state org-done-keywords) ;; org-state dynamically bound in org.el/org-todo
    (org-reset-checkbox-state-maybe)))

(add-hook 'org-after-todo-state-change-hook 'org-checklist)

;;new attempt
(defun glasser-org-reset-check-on-repeat ()
  (when (and (org-get-repeat) (member org-state org-done-keywords))
    (org-reset-checkbox-state-subtree)))
(add-hook 'org-after-todo-state-change-hook 'glasser-org-reset-check-on-repeat)
#+end_src
* Swap focuses
Functions used to swap focuses between personal and work.
#+begin_src elisp
(defun my/org-focus-personal()
  (interactive)
  (setq org-agenda-files (append (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
                                             (directory-files-recursively "~/Dropbox/org/roam" "\\.org$")) (directory-files-recursively "~/Dropbox/org/journal" "\\.org$"))
        +org-capture-todo-file "~/Dropbox/org/roam/personal_agenda.org"
        ))

(defun my/org-focus-work()
  (interactive)
  (setq org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/vispero/journal" "\\.org$"))
        +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
        ))
#+end_src
* Personal Machine
#+begin_src elisp :tangle (if (eq (doom-system-distro) 'arch) "config.el" "no")
(setq org-journal-dir "~/Dropbox/org/journal"
      ;; org-agenda-files (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
      ;;                              (directory-files-recursively "~/Dropbox/org" "\\.org$"))

      org-journal-date-format "%A, %d %B %Y\n"
      +org-capture-todo-file "~/Dropbox/org/roam/personal_agenda.org"
      ;; org-agenda-files 'personal-agenda-files
      org-journal-file-type 'monthly
      org-journal-file-format "Journal %Y-%m.org"
      )

;; (setq org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam" "\\.org$") (directory-files-recursively "~/Dropbox/org/journal" "\\.org$")))

(setq org-agenda-files (append (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
                                           (directory-files-recursively "~/Dropbox/org/roam" "\\.org$")) (directory-files-recursively "~/Dropbox/org/journal" "\\.org$")))



(defun test-directory-string (file-path)
  (concat "testDirectory/" file-path))

(defun test-directory-multiple (a b c d)
  (concat "testDirectory/" a b c d))
#+end_src
* Work machine
- You cannot put "\n\n" in org-journal-date format. It will cause your first entry to be on the previous date.
  + However, now your first entry appears to be on the same line as your header, it isn't an is a visual bug at first.
#+begin_src elisp :tangle (if (eq (doom-system-distro) 'ubuntu) "config.el" "no")
;; (setq org-journal-dir "~/Dropbox/org/vispero/journalTest"
(setq org-journal-dir "~/Dropbox/org/vispero/journal"
      org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/vispero/journal" "\\.org$"))
      org-journal-date-format "%A, %d %B %Y\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n:END:\n"
      ;; org-journal-file-header "#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:"
      org-journal-file-type 'weekly
      org-journal-file-format "%Y/%W_%m-%d.org"
      +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
      )

;; For journal testing
;; (setq! org-journal-dir "~/Dropbox/org/visperoJournal"
;;       org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/visperoJournal" "\\.org$"))
;;       org-journal-date-format "%A, %d %B %Y\n#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n"
;;       org-journal-file-type 'weekly
;;       org-journal-file-format "%Y_%W_%m-%d.org"
;;       +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
;;       )

;; (defun org-journal-file-header-func (time)
;;   "Custom function to create journal header."
;;   (concat
;;    (pcase org-journal-file-type
;;      (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
;;      (`weekly "#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n")
;;      (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
;;      (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))

;; (setq org-journal-file-header 'org-journal-file-header-func)
#+end_src
* Testing functionality
#+begin_src elisp :tangle no
(defun do-nothing-carry-over (old_entries))
(setq org-journal-handle-old-carryover 'do-nothing-carry-over
      org-journal-skip-carryover-drawers (list "CLOCKING"))

;; This doesn't work. Need to add more parameters to satisfy defcustom
(defcustom personal-agenda-files (append (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
                                                     (directory-files-recursively "~/Dropbox/org/roam" "\\.org$")) (directory-files-recursively "~/Dropbox/org/journal" "\\.org$")))
#+end_src
* Things to add
** A way to make all roam captures go to vispero directory if on work PC
- Can make the captures the same but instead reference some variable directory
  + Then have the OS version tangles just change that variable
** Make org directory and org roam directory for work go straight to the vispero path
*** :file-name cannot run a function I think
** Make a bug + swarmzilla hyperlink type
** Figure out the org-journal-handle-old-carryover
- Add a "tag" to the journal carry over = NOT "old"
- Add the logic from the org-journal documentation to tag old entries as "old"
  + Then just figure out some way to skip anything tagged "old"
  + Need to make sure not to remove the old tags like "bluetooth" when doing so
- Can maybe move away from using TODO states in journal and just use tags of the same representation
  + This would mean that if I want an item to be carry overed it would tag it with "inprogress" instead of marking it with a todo state
