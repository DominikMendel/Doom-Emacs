#+TITLE: Config
#+PROPERTY: header-args+ :tangle config.el
* Header info
Just some personal information and my doom-theme.
- I have been loving doom-horizon. I wanted something in dark mode that was best for my eyes.
  + After going through all the themes I ended up on horizon.
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Dominik Mendel"
      user-mail-address "Dominikmendel95@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)
#+end_src
* General values and Org-journal
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org"
      org-journal-date-prefix "* "
      org-journal-enable-agenda-integration t
      org-journal-enable-cache t
      ;; org-roam-directory "~/Dropbox/org/roam"
      +org-roam-open-buffer-on-find-file nil
      +snippets-dir "~/Dropbox/snippets"
      display-line-numbers-type 'visual
      scroll-margin 8
      vertico-scroll-margin 4
      )

(setq! org-journal-time-format "")

;; PDF auto-refresh after changes
(add-hook 'pdf-view-mode-hook (lambda () (auto-revert-mode 1)))

(after! org-journal
  (setq! org-journal-carryover-items "TODO=\"TODO\"|TODO=\"INPROGRESS\"|TODO=\"WAITING\"|TODO=\"BLOCKED\"|TODO=\"QUESTION\""))
#+end_src
* Custom functions
** Youtube url link
I wanted to extend the YouTube url link in Org Mode by including time markings. This function will concat the minutes and seconds to the end of the url link
#+begin_src elisp
(defun make-youtube-time-link (link-text)
  (let ((substrings (split-string link-text ",")))
    (browse-url (format "%s&t=%sm%ss" (first substrings) (second substrings) (third substrings)))))
#+end_src
** Clocktable function
This function is used in the ":match" parameter for an Org-clocktable. It will pull all clocked times from my entire work journal directory.
- This is very useful to record how much time I spent working on a specific project.
- I usually follow the Org-clocktable with the corresponding tag associated with the project to filter all of my total work to the work in the project I want.
  #+begin_src elisp
(defun vispero-journals() (directory-files-recursively "~/Dropbox/org/roam/vispero/journal" "\\.org$"))

(defun vispero-roam() (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.\\(org\\|org_archive\\)$"))

(defun personal-journals() (directory-files-recursively "~/Dropbox/org/roam/journal" "\\.org$"))

(defun all-roam() (directory-files-recursively "~/Dropbox/org/roam" "\\.\\(org\\|org_archive\\)$"))
  #+end_src
** Create linkable UUID
- Credit to Rainer König
I use this function all the time to create a UUID link to a header file so I can keep track of the link even after I archive it.
This is epsecially useful in my workflow where I would copy a task from my agenda to my journal to show that I am working on said task for the day. Later when I finish that task and archive it I still have a valid link.
#+begin_src elisp
(defun my/copy-idlink-to-clipboard() "Copy an ID link with the
headline to killring, if no ID is there then create a new unique
ID.  This function works only in org-mode or org-agenda buffers.

The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
       (interactive)
       (when (eq major-mode 'org-agenda-mode) ;if we are in agenda mode we switch to orgmode
         (org-agenda-show)
         (org-agenda-goto))
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
         (setq mytmphead (nth 4 (org-heading-components)))
         (setq mytmpid (funcall 'org-id-get-create))
         (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
         (kill-new mytmplink)
         (message "Copied %s to killring (clipboard)" mytmplink)))
(global-set-key (kbd "<f5>") 'my/copy-idlink-to-clipboard)
#+end_src
* Deft
#+begin_src elisp
(setq deft-directory "~/Dropbox/org"
      deft-extensions '("org" "txt" "org_archive")
      deft-use-filename-as-title t
      deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
      deft-recursive t)
#+end_src
* Logging
#+begin_src elisp

(setq org-startup-indented t           ;; Indent according to section
      org-log-reschedule t
      org-log-into-drawer t
      org-enforce-todo-checkbox-dependencies t)

;; Broken with Roam v2. It makes saves really slow
;; (add-hook 'before-save-hook 'org-update-all-dblocks())
#+end_src
* Theme
#+begin_src elisp
(setq doom-theme 'doom-solarized-dark)
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic)
  '(region :background "DarkSlateBlue")
  '(vertico-current :background "DarkSlateBlue"))
  ;; '(region :background "#094959"))

(defun my/next-theme ()
"Switch to the next theme in ‘custom-known-themes’.
If exhausted, disable themes.  If run again thereafter, wrap to
the beginning of the list."
  (interactive)
  (let* ((ct (or (car custom-enabled-themes)
                 (car custom-known-themes)))
         (next (cadr (memq ct custom-known-themes))))
    (when (memq next '(user changed))
      (setq next nil))
    (dolist (theme custom-enabled-themes)
      (disable-theme theme))
    (if next
        (progn
          (load-theme next t)
          (message "Loaded theme ‘%S’" next))
      (message "All themes disabled"))))
#+end_src
* Org
** General org
#+begin_src elisp
;; Marks a ToDo entry as done but makes the "LAST_REPEAT" the day of the schedule
;; This currenlty ONLY works with SCHEDULED items and not DEADLINES
(defun willdo-naggins--mark-done ()
  (interactive)
  (let* ((sched-ts (org-timestamp-from-string
                    (org-entry-get nil "SCHEDULED")))
         (thetime (org-timestamp-to-time sched-ts)))
    ;trick org-store-note into thinking the task was done when scheduled
    (define-advice org-add-log-setup (:after (&rest _) trick-store-note)
      (setq org-log-note-effective-time thetime))
    (org-todo 'done)
    (advice-remove 'org-add-log-setup #'org-add-log-setup@trick-store-note)
    ;set LAST_REPEAT to reflect the latest scheduling of task
    (org-add-planning-info 'closed (format-time-string
                    (org-time-stamp-format t t)
                    thetime))
    ;; (org-entry-put nil "LAST_REPEAT"
    ;; (org-entry-put nil "CLOSED"
    ;;                (format-time-string
    ;;                 (org-time-stamp-format t t)
    ;;                 thetime))
    ))

;; This doesn't work from org-agenda views
(defun my/mark-done-at-scheduled-time ()
  (interactive)
  (let* ((sched-ts (org-timestamp-from-string
                    (org-entry-get nil "SCHEDULED")))
         ;; (dm--ignore-automatic-dailies-logging t)
         (org-refile-keep t) ;; Set this to nil to delete the original!
         (org-id-link-to-org-use-id t)
         (org-after-refile-insert-hook #'save-buffer)
         (thetime (org-timestamp-to-time sched-ts)))

    (remove-hook 'org-after-todo-state-change-hook #'my/org-roam-copy-to-today-wrapper)
    ;trick org-store-note into thinking the task was done when scheduled
    (define-advice org-add-log-setup (:after (&rest _) trick-store-note)
      (setq org-log-note-effective-time thetime))
    (org-todo 'done)
    ;; (org-agenda-todo 'done) ;; This doesn't work
    (advice-remove 'org-add-log-setup #'org-add-log-setup@trick-store-note)
    ;set LAST_REPEAT to reflect the latest scheduling of task
    (org-add-planning-info 'closed (format-time-string
                    (org-time-stamp-format t t)
                    thetime))
    (save-window-excursion
      ;; (org-agenda-switch-to)
      (call-interactively 'org-store-link)
      (org-roam-dailies--capture thetime nil "!D"))

    (add-hook 'org-after-todo-state-change-hook #'my/org-roam-copy-to-today-wrapper)

  ;; (let ((org-refile-keep t) ;; Set this to nil to delete the original!
  ;;       (org-id-link-to-org-use-id t)
  ;;       (org-after-refile-insert-hook #'save-buffer)
  ;;       ;; (dm--ignore-automatic-dailies-logging t)
  ;;       )
  ;;   (save-window-excursion
  ;;     ;; (org-agenda-switch-to)
  ;;     (call-interactively 'org-store-link)
  ;;     (org-roam-dailies--capture thetime nil "!D"))
  ;;   )
    ))

(after! (:and org org-roam)
  (setq dm--org-archive-type "%s_archive::datetree/")
  (setq dm--org-archive-location-personal (concat (expand-file-name "archive" org-roam-directory) "/" dm--org-archive-type))
  (setq dm--org-archive-location-vispero (concat (expand-file-name "archive" dm--org-roam-vispero-dir) "/" dm--org-archive-type))

  (defun my/set-org-variables ()
        (cond ((string-equal dm--my-focus "vispero") (setq org-archive-location dm--org-archive-location-vispero))
            ((string-equal dm--my-focus "personal") (setq org-archive-location dm--org-archive-location-personal))
            ((string-equal dm--my-focus "all") (setq org-archive-location dm--org-archive-location-personal))
            (t (setq org-archive-location dm--org-archive-location-personal))))

  (my/set-org-variables)
  )

(after! org
  ;; Testing new archive
  ;; (setq org-archive-location "%s_archive::datetree/")
  ;; This doesn't work. Idk how to do an "olp" style
  ;; (setq org-archive-location "::* Tasks\n** ARCHIVE :ARCHIVE:")
  ;; (setq org-archive-location "::* ARCHIVE :ARCHIVE:")
  ;; (setq org-archive-location "testing_archive.org_archive::datetree/* From %s")
  ;; (setq org-archive-location "~/Dropbox/org/roam/archive/%s_archive::datetree/")

  (setq org-startup-folded t)
  (setq org-ellipsis " ▼ ")
  (setq org-hide-emphasis-markers t)
  ;; (add-to-list 'org-modules 'org-checklist)
  ;; (require 'org-checklist)
  ;; (add-to-list 'org-modules 'org-habits)
  ;; (require 'org-habits)
  (setq org-sparse-tree-open-archived-trees t) ;;For finding archived headings
  (setq org-clock-into-drawer "CLOCKING")
  (org-add-link-type "yt" #'make-youtube-time-link)
  (setq org-todo-keywords
        '((sequence  "TODO(t)" "INPROGRESS(i!)" "IN-REVIEW(r!)" "NEXT(n!)" "WAITING(w@/!)" "BLOCKED(b@/!)" "SOMEDAY(s!)" "|" "DONE(d@)" "CANCELLED(c!)" "ABANDONED(a@)")
          (sequence "QUESTION(q)" "|" "ANSWERED(@/!)")
          (sequence "GOAL(G)" "|" "ACHIEVED(A@)" "MISSED(M@)")
          (sequence "REPEAT" "|" "COMPLETED")
          (sequence "[ ](T)" "[-](I)" "[?](?)" "|" "[X](D)")))
  (setq org-log-done 'time)
  (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))
  ;; (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 2))))
  (setq org-list-demote-modify-bullet
       '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.") ("a." . "-")))
  (setq org-log-redeadline 'note)
  (setq org-cycle-open-archived-trees t)
  ;; (setq org-id-link-to-org-use-id t)
  )

  (defun +org/opened-buffer-files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))


;; This doesn't work
(defun my/org-buffer-restart()
  (interactive)
  (with-current-buffer buffer
  (fundamental-mode))
  ;; (with-current-buffer buffer
  ;; (org-mode))
  )

#+end_src
** Org-capture-templates
- %a allows for a link inserted from the file/headline you are currently at and inserts it into the capture
- %A is the same as %a but prompts for a description of the link
#+begin_src elisp
(defvar org-journal--date-location-scheduled-time nil)

(defun org-journal-date-location (&optional scheduled-time)
  (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
    (setq org-journal--date-location-scheduled-time scheduled-time)
    (org-journal-new-entry t (org-time-string-to-time scheduled-time))
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max))))

(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  (unless (eq org-journal-file-type 'daily)
    (org-narrow-to-subtree))
  (goto-char (point-max)))

(defun my/org-capture-plus-store-link()
  (interactive)
  (call-interactively 'org-store-link)
  ;; (call-interactively 'org-id-copy)
  ;; (org-capture))
  (org-capture nil "jJ"))
(global-set-key (kbd "<f4>") 'my/org-capture-plus-store-link)

(after! (:and org org-roam)
  (defun my/set-org-capture-templates()
      "Sets the org-capture-templates value based on what my current focus is. If my focus is 'personal' then the template, file name, and file path will be set to what I have defined as my personal tempaltes. This applies for all other defined focuses."

    (cond ((string-equal dm--my-focus "vispero") (setq +org-capture-todo-file dm--org-vispero-inbox-file-name))
        ((string-equal dm--my-focus "personal") (setq +org-capture-todo-file dm--org-personal-inbox-file-name))
        ((string-equal dm--my-focus "all") (setq +org-capture-todo-file dm--org-personal-inbox-file-name))
        (t (setq +org-capture-todo-file dm--org-personal-inbox-file-name)))

      (setq org-capture-templates
        `(("l" "Japanese")
          ("lv" "Vocabulary" plain
           (file (lambda () (dm/get-japanese-filename (dm/prompt-string "English alias:" 'dm--org-capture-area))))
           (file ,dm--org-roam-japanese-vocabulary-template)
           :unnarrowed t)

          ;; ("T" "Testing clock in" plain (file+olp +org-capture-todo-file "Testing" "Startup")
          ;; ("T" "Testing clock in" plain (file+olp +org-capture-todo-file "Testing" "%^{Select Meeting|Standup|Embedded Software Team|CAP Schedule Review|Embedded Software Knowledge Sharing|Technical Brief - One on One with Rob|Townhall}")
          ;; ("T" "Testing clock in" plain (id "edb8e933-ad45-4ba9-a28c-74b439d989f1")
           ;; "** %^{Select Meeting|Standup|Embedded Software Team|CAP Schedule Review|Embedded Software Knowledge Sharing|Technical Brief - One on One with Rob|Townhall}%? :meeting:"
          ;; "%?"
          ;; :jump-to-captured nil
          ;; :immediate-finish t
          ;; :clock-in t
          ;; :clock-keep t)

          ;; TODO add meetings section with meetings by ID and one for a "new" meeting not specified
          ;; ("m" "Meetings")

          ;; TODO Try using org-clock-current-task for file+olp+datetree
          ("c" "Clock entry" plain (clock)
           ""
           :unnarrowed t
           )

          ("t" "General ToDo" entry (file+headline +org-capture-todo-file "Tasks")
           "* TODO %^{What ToDo?}%? :new:")

          ("T" "Scheduled ToDo" entry (file+headline +org-capture-todo-file "Tasks")
           "* TODO %^{What Todo?}%?\nSCHEDULED: %^{Schedule}t")

          ("i" "General New Idea" entry (file+headline +org-capture-todo-file "Ideas")
           "* %^{What's your idea?}%? :new:\n%i")

          ("I" "General Inprogress" entry (file+headline +org-capture-todo-file "Tasks")
           "* INPROGRESS %?")

          ("p" "General Project" entry (file+headline +org-capture-todo-file "Projects")
           "* TODO %^{What ToDo?}%? :new:\n%i\nFrom : %a\n")

          ("g" "New Goal" entry (file+headline +org-capture-todo-file "Goals")
           "* GOAL %^{Describe your goal} %? :new:
Added on %U - Last reviewed on %U
:SMART:
:Sense: %^{What is the sense of this goal? Or why?}
:Measurable: %^{How do you measure it?}
:Actions: %^{What actions are needed?}
:Resources: %^{Which resources do you need?}
:Timebox: %^{How much time are you spending for it?}
:END:")

          ("j" "Journal")
          ;; ("jj" "Journal New Entry" plain (function org-journal-find-location)
          ;;  ;; "** %(format-time-string org-journal-time-format)%^{Title}%i%?"
          ;;  "** %(format-time-string org-journal-time-format)%i%?"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish nil
          ;;  :unnarrowed nil)

          ;; ("jt" "Journal New Clock Entry" plain (function org-journal-find-location)
          ;;  "** %(format-time-string org-journal-time-format)%i%?"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish nil
          ;;  :clock-in t)

          ;; Testing by removing %i
          ("jf" "Journal Future" plain (function org-journal-date-location)
                               "** TODO %?\n <%(princ org-journal--date-location-scheduled-time)>\n"
                               :jump-to-captured t)

          ("jj" "Journal New Entry" plain (function org-journal-find-location)
           ;; "** %(format-time-string org-journal-time-format)%^{Title}%i%?"
           "** %(format-time-string org-journal-time-format)%?"
           :jump-to-captured nil
           :immediate-finish nil
           :unnarrowed nil)

          ("jJ" "Journal Insert Roam" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%a"
           :jump-to-captured nil
           :immediate-finish t)

          ;; ("jJ" "Journal Inset Roam" plain (function org-journal-find-location)
          ;;  "** %(format-time-string org-journal-time-format) %?"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish nil
          ;;  :unnarrowed nil)

          ("jt" "Journal New Clock Entry" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%?"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jm" "Journal New Meeting" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%^{Select Meeting|Standup|Embedded Software Team|CAP Schedule Review|Embedded Software Knowledge Sharing|Technical Brief - One on One with Rob|Townhall}%? :meeting:"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jr" "Journal Review" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Review %^{prompt} for %^{prompt}%? :review:"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jh" "Journal Helping" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Helping %^{prompt}%? :helping:"
           :jump-to-captured nil
           :immediate-finish nil
           :clock-in t)

          ("jl" "Journal Lunch" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Lunch :break:"
           :jump-to-captured nil
           :immediate-finish t
           :clock-in t)

          ("js" "Journal Startup" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Startup"
           :jump-to-captured nil
           :immediate-finish t
           :clock-in t)

          ("jS" "Journal Startup jump to" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Startup"
           :jump-to-captured t
           :immediate-finish t
           :clock-in t)

          ("jT" "Journal Testing" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)Testing : %a"
           :jump-to-captured nil
           :immediate-finish t)

          ;; ("jm" "Journal Meetings")
          ;; ("jme" "Embedded Software Team" plain (function org-journal-find-location)
          ;;  "** %(format-time-string org-journal-time-format)Embedded Software Team :meeting:"
          ;;  :jump-to-captured nil
          ;;  :immediate-finish t
          ;;  :clock-in t)


          ("s" "Specific location")
          ("sp" "Personal")
          ("spt" "todoDOM" entry (file+headline "~/Dropbox/org/roam/personal_agenda.org" "Tasks")
           "* TODO %?\n %i\n")
          ;; :empty-lines-before 1)
          ;; :prepend t)
          ;; :headline "Test"
          ;; :type entry
          ;; :template ("* %?" "%i %a"))

          ("sw" "Work")
          ("swt" "Work General ToDo" entry (file+headline "~/Dropbox/org/roam/vispero/vispero_agenda.org" "Tasks")
           "* TODO %?\n %i\n")

          ("swp" "Work Project" entry (file+headline "~/Dropbox/org/roam/vispero/vispero_agenda.org" "Projects")
           "* TODO %?\n %i\n%a\n")
          )))
  (my/set-org-capture-templates))
#+end_src
** Org Agenda
#+begin_src elisp
;; (after! org-agenda
;;   (add-to-list 'org-agenda-bulk-custom-functions
;;                '(?a org-agenda-archive-to-archive-sibling)))

;; This doesn't work with the current function
;; (after! org-agenda
;;   (add-to-list 'org-agenda-bulk-custom-functions
;;                '(?D my/mark-done-at-scheduled-time)))

;; Doing this to clean up my org-agenda to view since ALL of my org-agenda-files
;; are tagged with "project", so it is redundant.
(after! org
    (add-to-list 'org-tags-exclude-from-inheritance "project"))
#+end_src
** Org-super-agenda
- Types of agenda custom command keywords: ([[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][link]])
  The desired agenda display/search. The options include agenda, todo, search, tags, alltodo, tags-todo, todo-tree, tags-tree, occur-tree, or a user-defined function.
#+begin_src elisp
(after! org-agenda
  (add-hook 'org-agenda-mode-hook #'origami-mode))

;; (use-package origami
;;     ;; :general (:keymaps 'org-super-agenda-header-map
;;     ;;                  "TAB" #'origami-toggle-node)
;;     :hook ((org-agenda-mode . origami-mode)))

(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode))

;; Vulpea functions to help with naming view
(setq org-agenda-prefix-format
      '((agenda . " %i %(vulpea-agenda-category 20)%?-20t% s")
        (todo . " %i %(vulpea-agenda-category 20) ")
        (tags . " %i %(vulpea-agenda-category 20) ")
        (search . " %i %(vulpea-agenda-category 20) ")))

(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (vulpea-buffer-prop-get "title"))
         (category (org-get-category))
         (result
          (or (if (and
                   title
                   (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-timestamp-if-done t
;; (setq org-agenda-skip-scheduled-if-done t
;;       org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t
      )

(defun my-agenda-skip-work ()
  "Skip tasks that are tagged as work related."
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ;; ((seq-contains-p (org-get-tags) "vispero")
       ((string-match-p "vispero" (buffer-file-name))
        subtree-end)
       ;; New: Doesn't work for some reason
       ;; ((seq-contains-p (org-get-tags) "ssg")
       ;;  subtree-end)
       (t
        nil)))))

(defun my-agenda-skip-non-work ()
  "Skip tasks that are tagged as non-work related."
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ;; ((not (seq-contains-p (org-get-tags) "vispero"))
       ((not (string-match-p "vispero" (buffer-file-name)))
        subtree-end)
       (t
        nil)))))

(defun my-agenda-skip-function-selector ()
  (cond ((string-equal dm--my-focus "vispero") (funcall #'my-agenda-skip-non-work))
        ((string-equal dm--my-focus "personal") (funcall #'my-agenda-skip-work))
        ((string-equal dm--my-focus "all") nil)
        (t nil)))

(setq org-agenda-skip-function 'my-agenda-skip-function-selector)

(setq my-agenda-work-cmd '(agenda
                           ""
                           ((org-agenda-span 'day)
                            (org-agenda-skip-function 'my-agenda-skip-non-work)))
      my-agenda-non-work-cmd '(agenda
                               ""
                               ((org-agenda-span 'day)
                                (org-agenda-skip-function 'my-agenda-skip-work))))

(setq my-super-group-agenda-today
      '(
        (:name "Clocked today"
         :log t)
        (:name "Scheduled Today"
         :time-grid t
         :date today
         :order 1)
        (:name "Habbits"
         :habit t
         :date today
         :order 2)
        (:name "Overdue"
         :face error
         :deadline past
         :order 3)
        (:discard (:not (:scheduled past)))
        (;; :name "Ongoing"
         ;; :scheduled past
         :auto-parent t
         :order 4)
        ;; (:auto-parent t
        ;;  :order 5)
        (:discard (:anything t))))

(setq my-super-group-alltodo-today
      '(
        ;; (:auto-category t)
        ;; You will see scheduled items from the agenda view, so discard any extras.
        (:discard (:scheduled today))
        (:discard (:todo "SOMEDAY"))
        (:name "Important"
         :priority "A"
         :order 1)
        (:name "Currently Open"
         :todo "INPROGRESS"
         :order 2)
        (:name "Reviews ToDo"
         :tag "review"
         :order 3)
        (:name "Bugs Todo"
         :tag "bug"
         :order 4)
        (:name "My Reviews"
         :todo "IN-REVIEW"
         :order 5)
        (:name "Pending"
         :todo "WAITING"
         :order 6)
        (:name "Blocked"
         :todo "BLOCKED"
         :order 7)
        (:discard (:not (:todo "TODO")))
        (:auto-parent t
         :order 8)
        (:discard (:anything t))))

(setq my-super-group-agenda-overview
      '(
        (:auto-parent t)
        ))

(setq my-super-group-alltodo-overview
      '(
        ;; (:auto-category t)
        ;; You will see scheduled items from the agenda view, so discard any extras.
        ;; (:discard (:scheduled today))
        (:name "Overdue (Past scheduled/deadline)"
         :face warning
         :deadline past
         :scheduled past
         :order 1)
        (:name "Inprogress"
         :todo "INPROGRESS"
         :order 2)
        (:name "In Review"
         :todo "IN-REVIEW"
         :order 3)
        (:order-multi (4 (:name "Waiting Tasks"
                          :todo "WAITING")
                         (:name "Blocked Tasks"
                          :todo "BLOCKED")))
        (:name "Next Tasks"
         :todo "NEXT"
         :order 5)
        (:name "Someday"
         :todo "SOMEDAY"
         :order 7)
        ;; (:discard (:not (:todo "TODO")))
        (:discard (:not (:todo t)))
        (:discard (:todo "GOAL"))
        (
         ;; :auto-category t
         :auto-parent t
         :order 6)

        ;; (:order-multi (6 (:todo "TODO") (:auto-category t)))
        ;; (:todo "TODO"
        ;;  :order 6)
        ;;  (:auto-category t
        ;;  ;;:todo "TODO"
        ;;  :order 6)
        ;; (:order-multi (5 (:auto-category t)
        ;;                (:name "Current Tasks"
        ;;                   :todo ("INPROGRESS" "IN-REVIEW"))
        ;;                  (:name "Open Tasks"
        ;;                   :todo "TODO")))

        ;; (:order-multi (3 (:name "Current Tasks"
        ;;                   :todo ("INPROGRESS" "IN-REVIEW"))
        ;;                  (:name "Open Tasks"
        ;;                   :todo "TODO")))
        (:discard (:anything t))))

(setq my-super-group-agenda-planning
      '(
        (:discard (:todo "GOAL"))
        (:discard (:todo "REPEAT"))
         (:scheduled t)))

(setq my-super-group-todo-planning
      '((:name "High Priority"
         :priority>= "B")
        (:name "Inprogress"
         :todo "INPROGRESS"
         :order 1)
        (:name "In Review"
         :todo "IN-REVIEW"
         :order 2)
        (:order-multi (3 (:name "Waiting Tasks"
                          :todo "WAITING")
                         (:name "Blocked Tasks"
                          :todo "BLOCKED")))
        (:name "Next Tasks"
         :todo "NEXT"
         :order 4)
        ;; Specifically doing this out of order
        (:name "Some Day Tasks"
         :todo "SOMEDAY"
         :order 6)
        (:discard (:todo ("REPEAT" "GOAL")))
        (:name "Individual Tasks"
         :auto-todo t
         ;; :todo t
         ;;:auto-category t
         :order 5)
        (:discard (:anything t))))

(setq my-super-group-alltodo-overview-done
      '((:name "Remove new tag and assign TODO states and priorities"
         :log closed)
         ;; :todo "DONE")
         ;; :and (:todo "DONE"
         ;;       :scheduled t
         ;; :not (:log closed)))
         ;; :todo ("DONE" "CANCELLED" "ABANDONED" "ANSWERED" "MISSED" "ACHIEVED" "COMPLETED"))
        (:discard (:anything t))))

(setq my-agenda-super-group-alltodo
      '(
        ;; Discarding the file path works and I don't need the functions anymore
        ;; (:discard (:file-path "vispero"))
        (:name "Next to do"
            :todo "NEXT"
            :order 4)
        (:name "Due Today"
            :deadline today
            :order 2)
        (:name "Important"
            :tag "Important"
            :priority "A"
            :order 6)
        (:name "Due Soon"
            :deadline future
            :order 8)
        (:name "Overdue"
            :deadline past
            :face error
            :order 7)
        (:name "Inprogress"
            :todo "INPROGRESS"
            :order 3)
        (:name "Questions"
            ;; :regexp (:todo "QUESTION" :tag "question")
            :todo "QUESTION"
            :tag "question"
            :order 10)
        (:name "Questions tags"
            :tag "question"
            :order 11)
        (:name "Projects"
            :tag "Project"
            :order 15)
        (:name "In review"
            :todo "IN-REVIEW"
            :order 14)
        (:name "Waiting"
            :todo "WAITING"
            :order 20)
        (:name "Some day"
            :todo "SOMEDAY"
            :order 25)
        (:name "Done"
            :todo "DONE"
            :order 26)
        (:name "Trivial"
            :priority<= "C"
            :tag ("Trivial" "Unimportant")
            :todo ("SOMEDAY")
            :order 90)
        (:name "Everything else"
            :anything t
            :auto-tags t
            :order 89)
        ;; (:name "Random shit"
        ;;  :auto-tags t
        ;;  :priority<= "C"
        ;;  :order 89)
        (:discard (:tag ("Chore" "Routine" "Daily")))))

(setq my-agenda-super-group-agenda '((:name "Today"
                            :time-grid t
                            :date today
                            :todo "TODAY"
                            :scheduled today
                            :order 1)))

(setq my-agenda-super-group-tags
      '((:name "Questions"
        ;; '((
        :tag "question"
        ;; :anything t
        ;; :auto-tags t
        :order 12)
        (:discard (:anything t))))

(setq org-super-agenda-header-map (make-sparse-keymap)) ;;Needed for evil keys in org-super-agenda
(after! org
  (setq org-agenda-custom-commands
        '(
          ;; ("op" "Overview Personal"
          ;;  ((agenda "" ((org-agenda-span 'day)
          ;;   (org-agenda-skip-function 'my-agenda-skip-work)
          ;;               (org-super-agenda-groups
          ;;                my-agenda-super-group-agenda
          ;;                )))
          ;;   ;; (tags "question" ((org-agenda-overriding-header "")
          ;;   (tags "." ((org-agenda-overriding-header "")
          ;;   (org-agenda-skip-function 'my-agenda-skip-work)
          ;;              (org-super-agenda-groups
          ;;               my-agenda-super-group-tags
          ;;              )))
          ;;   (alltodo "" ((org-agenda-overriding-header "")
          ;;   (org-agenda-skip-function 'my-agenda-skip-work)
          ;;                ;; (tags-todo "." ((org-agenda-overriding-header "")
          ;;                (org-super-agenda-groups
          ;;                 my-agenda-super-group-alltodo)))
          ;;   ))

          ;; ("ow" "Overview Work"
          ;;  ((agenda "" ((org-agenda-span 'day)
          ;;   (org-agenda-skip-function 'my-agenda-skip-non-work)
          ;;               (org-super-agenda-groups
          ;;                my-agenda-super-group-agenda
          ;;                )))
          ;;   ;; (tags "question" ((org-agenda-overriding-header "")
          ;;   (tags "." ((org-agenda-overriding-header "")
          ;;   (org-agenda-skip-function 'my-agenda-skip-non-work)
          ;;              (org-super-agenda-groups
          ;;               my-agenda-super-group-tags
          ;;              )))
          ;;   (alltodo "" ((org-agenda-overriding-header "")
          ;;   (org-agenda-skip-function 'my-agenda-skip-non-work)
          ;;                ;; (tags-todo "." ((org-agenda-overriding-header "")
          ;;                (org-super-agenda-groups
          ;;                 my-agenda-super-group-alltodo)))
          ;;   ))


          ;; ("p" "Projects"
          ;;  ;; (
          ;;  ((agenda "" ((org-agenda-span 'day)
          ;;               (org-super-agenda-groups
          ;;                '((:name "Today"
          ;;                   :time-grid t
          ;;                   :date today
          ;;                   :todo "TODAY"
          ;;                   :scheduled today
          ;;                   :order 1)))))
          ;;   (alltodo "" ((org-agenda-overriding-header "")
          ;;                (org-super-agenda-groups
          ;;                 `((:name "WAITING"
          ;;                    :children "WAITING"
          ;;                    :order 2)
          ;;                   (:discard (:anything t)))
          ;;                 )))))

          ;; ("P" "Personal test"
           ;; (,my-agenda-non-work-cmd))

          ("t" "Today view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-agenda-span 'day)
                        (org-agenda-start-day nil)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-time-grid '((daily today) (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        (org-super-agenda-groups my-super-group-agenda-today)
                        ))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups my-super-group-alltodo-today)))))

          ("pw" "Planning Week"
          ((tags-todo "goal" ((org-agenda-overriding-header "Goals")))
           (agenda "" ((org-agenda-overriding-header "Month Planner")
                       (org-agenda-span 14)
                        (org-super-agenda-groups my-super-group-agenda-planning)
                        ;; (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        ;; (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
                        )
                    )
            (todo "" ((org-agenda-overriding-header "Things to schedule")
                         (org-super-agenda-groups my-super-group-todo-planning)))))

          ("pm" "Planning Month"
          ((tags-todo "goal" ((org-agenda-overriding-header "Goals")))
           (agenda "" ((org-agenda-overriding-header "Month Planner")
                       (org-agenda-span 'month)
                        (org-super-agenda-groups my-super-group-agenda-planning)
                        ;; (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        ;; (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
                        )
                    )
            (todo "" ((org-agenda-overriding-header "Things to schedule")
                         (org-super-agenda-groups my-super-group-todo-planning)))))

          ("w" "Week Overview"
          ((agenda "" ((org-agenda-overriding-header "Week view")
                        (org-agenda-span 'week)
                        (org-agenda-start-day nil)
                        (org-agenda-start-on-weekday nil)
                        (org-super-agenda-groups my-super-group-agenda-overview)
                        (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        ;; (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
                        )
                    )
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups my-super-group-alltodo-overview)))))

          ;; TODO look at and update super-agenda-groups
          ("b" "Bi-Week Overview"
          ((agenda "" ((org-agenda-overriding-header "Bi-Weekly view")
                        (org-agenda-span 14)
                        (org-super-agenda-groups my-super-group-agenda-overview)
                        (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        ;; (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
                        )
                    )
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups my-super-group-alltodo-overview)))))

          ;; TODO look at and update super-agenda-groups
          ("m" "Month Overview"
          ((agenda "" ((org-agenda-overriding-header "Month view")
                        (org-agenda-span 'month)
                        (org-agenda-start-day nil)
                        (org-agenda-start-on-weekday nil)
                        (org-super-agenda-groups my-super-group-agenda-overview)
                        (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        ;; (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
                        )
                    )
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups my-super-group-alltodo-overview)))))

          ;; TODO look at and update super-agenda-groups
          ("y" "Year Overview"
          ((agenda "" ((org-agenda-overriding-header "Year view")
                        (org-agenda-span 'year)
                        (org-super-agenda-groups my-super-group-agenda-overview)
                        (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
                        ;; (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
                        )
                    )
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups my-super-group-alltodo-overview)))))


          ("W" . "Weekly Review Helper")
          ("Wn" "New Tasks"
           ((tags "new" ((org-agenda-overriding-header "Remove new tag and assign TODO states and priorities")))))
          ("Wd" "Done Tasks"
           ((todo "DONE|CANCELLED|ABANDONED|ANSWERED|ACHIEVED|MISSED" ((org-agenda-overriding-header "Archive all DONE items")
                         ;; (org-super-agenda-groups my-super-group-alltodo-overview-done)
                         ))))

          ;; From m-dwyer
          ;; ("W" "Weekly review TEST"
          ;; ((agenda "" ((org-agenda-overriding-header "Week view")
          ;;               (org-agenda-span 'week)
          ;;               (org-agenda-start-on-weekday 1)
          ;;               (org-agenda-time-grid '(nil (800 1000 1200 1400 1600 1800 2000) "" "----------------"))
          ;;               (org-agenda-prefix-format '((agenda . " %i %?-12t%-6e% s")))
          ;;               )
          ;;           )
          ;;   (alltodo "" ((org-agenda-overriding-header "")
          ;;                (org-super-agenda-groups
          ;;                 '((:name "Overdue (past scheduled/deadline)"
          ;;                    :deadline past
          ;;                    :scheduled past
          ;;                    :order 1
          ;;                    )
          ;;                   (:name "Individual Tasks"
          ;;                    :file-path "task"
          ;;                    :order 2
          ;;                    )
          ;;                   (:name "Next tasks"
          ;;                    :todo "NEXT"
          ;;                    :order 3)
          ;;                   (:discard (:anything t))
          ;;                   )
          ;;                 )
          ;;                )
          ;;            )
          ;;   )
          ;; )

          ;; ("w" "Weekly review"
          ;;  ((alltodo "" ((org-agenda-overriding-header "")
          ;;               (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexpt "^\\*\\* DONE"))))))
          ;; ))))
          ))

  )

;; '(
;;   ("o" "Overview")
;;   ("ot" "Overview Test"
;; ((agenda "" ((org-agenda-span 'day)
;;              (org-super-agenda-groups
;;               '((:name "Today"
;;                  :time-grid t
;;                  :date today
;;                  :todo "TODAY"
;;                  :scheduled today
;;                  :order 1)))))
;;  (alltodo "" ((org-agenda-overriding-header "")
;;               (org-super-agenda-groups
;;                '((:name "Next to do"
;;                   :todo "NEXT"
;;                   :order 4)
;;                  (:name "Important"
;;                   :tag "Important"
;;                   :priority "A"
;;                   :order 6)
;;                  (:name "Due Today"
;;                   :deadline today
;;                   :order 2)
;;                  (:name "Due Soon"
;;                   :deadline future
;;                   :order 8)
;;                  (:name "Overdue"
;;                   :deadline past
;;                   :face error
;;                   :order 7)
;;                  (:name "Projects"
;;                   :tag "Project"
;;                   :order 10)
;;                  (:name "Questions"
;;                   :todo "QUESTION"
;;                   :order 15)
;;                  (:name "Inprogress"
;;                   :todo "INPROGRESS"
;;                   :order 3)
;;                  (:name "In review"
;;                   :todo "IN-REVIEW"
;;                   :order 14)
;;                  (:name "Waiting"
;;                   :todo "WAITING"
;;                   :order 20)
;;                  (:name "Some day"
;;                   :todo "SOMEDAY"
;;                   :order 25)
;;                  (:name "Trivial"
;;                   :priority<= "C"
;;                   :tag ("Trivial" "Unimportant")
;;                   :todo ("SOMEDAY")
;;                   :order 90)
;;                  (:discard (:tag ("Chore" "Routine" "Daily")))))))))))

;; (setq org-agenda-custom-commands
;;       '(("A" . "Agendas")
;;         ("AT" "Daily Overview"
;;          (agenda "" (org-agenda-span 'day)
;;                  (org-super-agenda-groups
;;                   '((:name "Today"
;;                      :time-grid t
;;                      :date today
;;                      :todo "INPROGRESS")))))

;;         ("AW" "Weekly Overview"
;;          (org-agenda-span 'week))

;;         ))

;; (after! org-capture
;;   (setq org-capture-templates
;;   ;; (add-to-list 'org-capture-templates
;;         '("T" "Todo" entry (file+headline "~/Dropbox/org/roam/vispero/vispero_agenda.org" "Tasks")
;;           "* TODO %?\n %i\n %a")))
;; (use-package! org-super-agenda
;;   :commands (org-super-agenda-moda))
;; (after! org-agenda
;;   (org-super-agenda-mode))

;; (setq org-agenda-skip-scheduled-if-done t
;;       org-agenda-skip-deadline-if-done t
;;       org-agenda-include-deadlines t
;;       org-agenda-block-separator nil
;;       org-agenda-tags-column 100 ;; from testing this seems to be a good value
;;       org-agenda-compact-blocks t)
#+end_src
** Org-journal
#+begin_src elisp
;; (add-hook 'org-journal-after-header-create-hook #'org-id-get-create)
(add-hook 'org-journal-after-entry-create-hook #'org-roam-db-autosync--setup-file-h)
(add-hook 'org-journal-after-entry-create-hook #'org-journal-restore-hooks)

(defun org-journal-restore-hooks ()
  (add-hook 'find-file-hook #'vulpea-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-project-update-tag))

(add-hook 'org-journal-after-header-create-hook 'org-create-new-id-journal)
(defun org-create-new-id-journal ()
  (goto-char (point-min))
  (org-id-get-create)
  ;; (save-buffer)
  ;; (org-roam-db-update-file)
  ;; (org-roam-db-sync)
  ;; (org-update-all-dblocks)
  (goto-char (point-max)))
#+end_src
* Org-roam
** General
#+begin_src elisp
  ;; (org-roam-db-build-cache ())

  ;; "Vispero %A, %B %d %Y"
  ;; REMOVE VISPERO AFTER TESTING
;;         '(("d" "default" entry "** %?"
;;            :if-new (file+head "Vispero %<%Y-%m-%d>.org" ":PROPERTIES:
;; :ROAM_ALIASES: \"Vispero %<%A, %B %d %Y>\"
;; :END:
;; :CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %<%Y-%m-%d> :maxlevel 9\n#+END:\n:END:\n#+TITLE: Vispero %<%Y-%m-%d>\n* %<%A, %d %B %Y>\n")
;;            :prepend nil)
;;           ))

;;   (setq org-roam-dailies-capture-templates
;;         '(("d" "default" plain "** %?" :target
;;            (file+head "Vispero %<%Y-%m-%d>.org" ":PROPERTIES:
;; :ROAM_ALIASES: \"Vispero %<%A, %B %d %Y>\"
;; :END:
;; ,#+TITLE: Vispero %<%Y-%m-%d>\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %<%Y-%m-%d> :maxlevel 9\n#+END:\n:END:\n* %<%A, %d %B %Y>\n"))
;;           ))
(setq lexical-binding t)

(after! roam
  (setq org-roam-directory "~/Dropbox/org/roam"))

(setq org-roam-node-default-sort nil)

  ;; (setq lexical-binding t)

(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "project")
   :templates org-roam-capture-templates))

(defun my/org-roam-find-people ()
  (interactive)
  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "people")
   :templates org-roam-capture-templates))

(defun my/org-roam-help-people ()
  (interactive)
  ;; Select a project file to open, creating it if necessary

  (let ((head
        (with-temp-buffer
        (cond ((string-equal dm--my-focus "vispero") (insert-file-contents dm--org-roam-vispero-people-template))
                (t (insert-file-contents dm--org-roam-vispero-people-template)))
                (buffer-string)))
        (file-name
            (cond ((string-equal dm--my-focus "vispero") (expand-file-name "${slug}.org" dm--org-roam-vispero-dir))
                    (t (expand-file-name "${slug}.org" org-roam-directory)))))
    ;; @TODO DJM clean up template system, add custom templates
  ;;(org-roam-node-find
   (org-roam-capture

   nil
   nil
   :filter-fn (my/org-roam-filter-by-tag "people")
   ;; :templates org-roam-capture-templates
   :templates

          ;; (("e" "New Entry" entry "* %?"
          ;;   :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
          ;;   :unnarrowed t))
   `(("h" "Helping" plain ""
      :clock-in t
      :unnarrowed t
        :target (file+head+olp ,file-name ,head ("Helping"))))
                        )))
        ;; :target (file+olp "${slug}.org" ("Journal"))))
        ;; :target (olp ("Journal"))))
        ;; :if-new (file+head+olp "${slug}.org" "" ("Journal"))))
                ;; :target (file+head+olp "${slug}.org" ,head ("Journal"))))
                ;; :target (olp ("Journal"))))
                ;; :target (file+head+olp ,file-name ,head ("Journal"))))

(defun my/org-roam-capture-projects ()
  (interactive)
  (org-roam-capture
   nil
   ;; nil
   "!t"
   :filter-fn (my/org-roam-filter-by-tag "project")
   ;; :templates org-roam-capture-templates
   ))

  ;; (org-roam-node-find
  ;;  nil
  ;;  nil
  ;;  (my/org-roam-filter-by-tag "project")
  ;;  :templates
  ;;  '(("p" "project" plain "** %?"
  ;;     :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n#+filetags: project\n- tags ::\n* Tasks\n** ARCHIVE :ARCHIVE:\n" ("Tasks"))
  ;;     :unnarrowed t))))

;; (defun my/org-roam-capture-task ()
;;   (interactive)
;;   ;; Add the project file to the agenda after capture is finished
;;   ;;(add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

;;   ;; Capture the new task, creating the project file if necessary
;;   (org-roam-capture- :node (org-roam-node-read
;;                             nil
;;                             (my/org-roam-filter-by-tag "project"))
;;                      :templates '(("p" "project" plain "** TODO %?"
;;                                    :if-new (file+head+olp "${slug}.org"
;;                                                           "#+TITLE: ${title}\n#+filetags: project\n- tags ::\n* Tasks\n** ARCHIVE :ARCHIVE:\n"
;;                                                           ("Tasks"))))))

;; (after! org-roam
;; (defun my/org-roam-copy-todo-to-today ()
;;   (interactive)
;;   (let ((org-refile-keep t) ;; Set this to nil to delete the original!
;;         (org-roam-dailies-capture-templates
;;           '(("t" "tasks" entry "%?"
;;              :if-new (file+head+olp Personal "Personal %<%Y-%m-%d>.org" ":PROPERTIES:\n:ROAM_ALIASES: \"Personal %<%A, %B %d %Y>\"\n:END:\n#+TITLE: Personal %<%Y-%m-%d>\n* %<%A, %d %B %Y>\n" ("Tasks")))))
;;         (org-after-refile-insert-hook #'save-buffer)
;;         today-file
;;         pos)
;;     (save-window-excursion
;;       (org-roam-dailies--capture (current-time) t)
;;       ;; (org-roam-dailies-capture-date (current-time) t)
;;       ;; (org-roam-dailies-capture-today nil)
;;       (setq today-file (buffer-file-name))
;;       (setq pos (point)))

;;     ;; Only refile if the target file is different than the current file
;;     (unless (equal (file-truename today-file)
;;                    (file-truename (buffer-file-name)))
;;       (org-refile nil nil (list "Tasks" today-file nil pos)))))
;; )
#+end_src
** Attempting automatic done logging
#+begin_src elisp :tangle yes
(defun my/test-org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (head
            (with-temp-buffer
            (cond ((string-equal dm--my-focus "vispero") (insert-file-contents dm--org-vispero-daily-template))
                    (t (insert-file-contents dm--org-personal-daily-template)))
                (buffer-string)))
                (file-name
                (cond ((string-equal dm--my-focus "vispero") dm--org-vispero-file-name)
                        (t dm--org-personal-file-name)))
        (org-roam-dailies-capture-templates
          '(
            ("t" "tasks" entry "%?"
             ;; :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))
             (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))
            ;; ("c" "Clocking" entry "** %<%H:%M> %k %K Current clock %(azr/print-node-link \"%k\")"
            ;;     :target (file+head+olp ,file-name ,head ("Journal")))
            ))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
    ;; (save-excursion
      ;; (org-roam-dailies--capture (current-time) t)
      (org-roam-dailies-capture-today nil "c")
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    ;; (unless (equal (file-truename today-file)
    ;;                (file-truename (buffer-file-name)))
    ;;   (org-refile nil nil (list "Tasks" today-file nil pos)))
    ))

(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-id-link-to-org-use-id t)
        (org-after-refile-insert-hook #'save-buffer))
    ;; (save-window-excursion
    ;;   (call-interactively 'org-id-copy)
    ;;   (org-roam-dailies-capture-today nil "!D"))))

    ;; (message "Should ignore = " dm--ignore-automatic-dailies-logging)
    ;; (when (not dm--ignore-automatic-dailies-logging)
    ;;     (save-window-excursion
    ;;       (message "Going to call daily capture")
    ;;     ;; (org-agenda-switch-to)
    ;;             (call-interactively 'org-store-link)
    ;;             (org-roam-dailies-capture-today nil "!D")))

    (save-window-excursion
      ;; (org-agenda-switch-to)
      (call-interactively 'org-store-link)
      (org-roam-dailies-capture-today nil "!D"))
    ))

(defun my/org-roam-capture-plus-store-link()
  (interactive)
  (call-interactively 'org-store-link)
  (org-roam-dailies-capture-today nil "!D"))

;; (defvar dm--ignore-automatic-dailies-logging nil "If this is set to 't' then the automatic logging done in org-roam dailies will be ignored.")

(after! (:and org org-roam)
    ;; (add-to-list 'org-after-todo-state-change-hook
    (add-hook 'org-after-todo-state-change-hook #'my/org-roam-copy-to-today-wrapper))
                 ;; (lambda (type)
                 ;;   (when (eq type 'done)
                ;; (lambda ()
                ;; ;; (when (equal org-state "DONE")
                ;; (when (or (equal org-state "DONE") (equal org-state "COMPLETED"))
                ;; ;; (when (and (not dm--ignore-automatic-dailies-logging) (or (equal org-state "DONE") (equal org-state "COMPLETED")))
                ;; ;; (when (equal (org-element-property :todo-type 'done))
                ;; ;; (when (equal (:todo-type 'done))
                ;; ;; (when (org-element-map
                ;; ;;           (org-element-at-point 'headline)
                ;; ;;           'headline)
                ;;     ;; (my/org-roam-capture-plus-store-link)))))
                ;;     (my/org-roam-copy-todo-to-today)))))

(defun my/org-roam-copy-to-today-wrapper ()
  (when (or (equal org-state "DONE") (equal org-state "COMPLETED"))
                    (my/org-roam-copy-todo-to-today)))

(defun my/org-roam-capture-clock-in()
  (interactive)
  (let ((org-id-link-to-org-use-id t))
        (call-interactively 'org-store-link)
        (org-roam-dailies-capture-today nil "!CI")))

(defun my/org-roam-capture-clock-out()
  (interactive)
  (let ((org-id-link-to-org-use-id t))
        (call-interactively 'org-store-link)
        (org-roam-dailies-capture-today nil "!CO")))

(add-hook 'org-clock-in-hook #'my/org-roam-capture-clock-in)
(add-hook 'org-clock-out-hook #'my/org-roam-capture-clock-out)
#+end_src
** Capture templates
#+begin_src elisp
;; Remapping functions to default to the default template
(defun my/org-roam-dailies-goto-today ()
  (interactive)
  (org-roam-dailies-goto-today "d"))

(defun my/org-roam-dailies-goto-date (&optional prefer-future)
  (interactive)
  (org-roam-dailies-goto-date prefer-future "d"))

(defun my/org-roam-dailies-goto-tomorrow (n)
  (interactive "p")
  (org-roam-dailies-goto-tomorrow n "d"))

(defun my/org-roam-dailies-goto-yesterday (n)
  (interactive "p")
  (org-roam-dailies-goto-yesterday n "d"))

(after! org-roam
    ;; Template and directory locations
    (setq dm--org-templates-dir (expand-file-name "templates" doom-private-dir))
    (setq dm--org-roam-vispero-dir (expand-file-name "vispero" org-roam-directory))
    (setq dm--org-personal-inbox-file-name (expand-file-name "personal_agenda.org" org-roam-directory))
    (setq dm--org-roam-website-dir (expand-file-name "website" org-roam-directory))
    (setq dm--org-vispero-inbox-file-name (expand-file-name "vispero_agenda.org" dm--org-roam-vispero-dir))
    (setq dm--org-roam-default-template (expand-file-name "roam-default.org" dm--org-templates-dir))
    (setq dm--org-roam-new-area-template (expand-file-name "roam-new-area.org" dm--org-templates-dir))
    (setq dm--org-roam-reading-template (expand-file-name "roam-reading.org" dm--org-templates-dir))
    (setq dm--org-roam-reading-character-template (expand-file-name "roam-reading-character.org" dm--org-templates-dir))
    (setq dm--org-roam-vispero-default-template (expand-file-name "roam-vispero-default.org" dm--org-templates-dir))
    (setq dm--org-roam-vispero-tagged-template (expand-file-name "roam-vispero-tagged.org" dm--org-templates-dir))
    (setq dm--org-roam-vispero-people-template (expand-file-name "roam-vispero-people.org" dm--org-templates-dir))
    (setq dm--org-roam-japanese-vocabulary-template (expand-file-name "roam-japanese-vocabulary.org" dm--org-templates-dir))
    ;; Dailies file name and templates
    (setq dm--org-roam-personal-dailies-dir (expand-file-name "daily" org-roam-directory))
    (setq dm--org-roam-vispero-dailies-dir (expand-file-name "daily" dm--org-roam-vispero-dir))
    (setq dm--org-personal-daily-template (expand-file-name "personal-daily.org" dm--org-templates-dir))
    (setq dm--org-vispero-daily-template (expand-file-name "vispero-daily.org" dm--org-templates-dir))
    (setq dm--org-roam-ref-general-template (expand-file-name "roam-ref-general.org" dm--org-templates-dir))
    (setq dm--org-personal-file-name "Personal %<%Y-%m-%d>.org")
    (setq dm--org-vispero-file-name "Vispero %<%Y-%m-%d>.org")

    (setq dm--org-roam-japanese-dir (expand-file-name "japanese" org-roam-directory))

    (defun dm/prompt-string (prompt variable)
      (set variable (read-string prompt)))

    (defun dm/get-japanese-filename (name)
      (expand-file-name
       (format "%s.org" (s-dashed-words name)) dm--org-roam-japanese-dir))

    (defun my/set-org-roam-dailies-capture ()
      "Sets the org-roam-dailies-capture-templates value based on what my current focus is. If my focus is 'personal' then the template, file name, and file path will be set to what I have defined as my personal journal. This applies for all other defined focuses."

      ;; Set the dailies directory based on focus
        (cond ((string-equal dm--my-focus "vispero") (setq org-roam-dailies-directory dm--org-roam-vispero-dailies-dir))
            ((string-equal dm--my-focus "personal") (setq org-roam-dailies-directory dm--org-roam-personal-dailies-dir))
            ((string-equal dm--my-focus "all") (setq org-roam-dailies-directory dm--org-roam-personal-dailies-dir))
            (t (setq org-roam-dailies-directory dm--org-roam-personal-dailies-dir)))

        (setq org-roam-dailies-capture-templates
            (let ((head
                (with-temp-buffer
                (cond ((string-equal dm--my-focus "vispero") (insert-file-contents dm--org-vispero-daily-template))
                        (t (insert-file-contents dm--org-personal-daily-template)))
                    (buffer-string)))
                  (file-name
                   (cond ((string-equal dm--my-focus "vispero") dm--org-vispero-file-name)
                         (t dm--org-personal-file-name))))

            ;; Backtick list
            `(("d" "default" plain "%?"
                :target (file+head ,file-name ,head)
                :unarrowed t)
                ;; ("C" "Clocking" item "1. %<%H:%M> %(azr/print-node-link \"%k\")"
                ("!CI" "Clocking In" item "1. %<%H:%M> %a"
                :unnarrowed t
                :immediate-finish t
                :clock-keep t
                :target (file+head+olp ,file-name ,head ("Clock History" "Clock In")))
                ("!CO" "Clocking Out" item "1. %<%H:%M> %a"
                :unnarrowed t
                :immediate-finish t
                :clock-keep t
                :target (file+head+olp ,file-name ,head ("Clock History" "Clock Out")))
                ("!D" "Done Log" item "1. %<%H:%M> %a"
                :immediate-finish t
                :target (file+head+olp ,file-name ,head ("Closed Tasks")))
                ;; ("jj" "Journal New Entry" entry "** %<%H:%M> %?"
                ;; :target (file+head+olp ,file-name ,head ("Journal")))
                ("jj" "Journal New Entry" entry "* %?"
                :target (file+head+olp ,file-name ,head ("Journal")))
                ("jl" "Journal Link" entry "* %a %?"
                :target (file+head+olp ,file-name ,head ("Journal"))
                :immediate-finish t)
                ("jt" "Journal ToDo" item "[ ] %?"
                :target (file+head+olp ,file-name ,head ("Things ToDo")))
                ;; Eventually remove these/replace:
                ("t" "ToDo" item "[ ] %?"
                :target (file+head+olp ,file-name ,head ("Test"))))
                )))

    (my/set-org-roam-dailies-capture)

(defun azr/print-node-link (title)
  "Insert a org-roam-node-link to a title if the file is found, if not print the title as it is"
  (let* ((nd (org-roam-node-from-title-or-alias title)) )
  (if nd
        (let* ((ID (org-roam-node-id nd)))
        (print (format " [[id:%s][%s]]" ID title)))
    (print title))
))

(setq org-roam-capture-templates
        ;; Backtick list
        `(("d" "default" plain (file ,dm--org-roam-default-template)
           :target (file ,(expand-file-name "${slug}.org" org-roam-directory))
           :unnarrowed t)

          ("a" "New Area" plain (file ,dm--org-roam-new-area-template)
           :target (file ,(expand-file-name "${slug}.org" org-roam-directory))
           :unnarrowed t)

          ;; Doesn't work with Roam v2 atm.
          ("e" "New Entry" entry "* %?"
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)

          ("E" "New Entry with ID" entry "* %?\nPROPERTIES:
:ID:%(org-id-get-create t)
:END:"
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           :unnarrowed t)

          ;; ("e" "New Entry" entry  "* %?"
          ;;  :if-new (file+head "${slug}.org")
          ;;  :unnarrowed t)

          ("r" "Reading General")
          ("rr" "Reading" plain (file ,dm--org-roam-reading-template)
           :target (file ,(expand-file-name "${slug}.org" org-roam-directory))
           :unnarrowed t)

          ("rc" "Reading Character" plain (file ,dm--org-roam-reading-character-template)
           :target (file ,(expand-file-name "${slug}.org" org-roam-directory))
           :unnarrowed t)

          ("j" "Japanese")
          ;; ("jj" "Japanese Vocabulary" plain
          ;;  (file (lambda () (dm/get-japanese-filename (dm/prompt-string "Test input:" 'dm--org-capture-area))))
          ;;  (file ,dm--org-roam-japanese-vocabulary-template)
          ;;  :unnarrowed t)

          ;; ("jj" "Japanese Vocabulary" plain (file ,dm--org-roam-japanese-vocabulary-template)
          ;;  :target (file ,(expand-file-name "${slug}.org" org-roam-directory))
          ;;  :unnarrowed t)

;;           ("jj" "Japanese Vocabulary" plain "- tags :: [[roam:Japanese]]\n* Definition %?"
;;            :if-new (file+head "${slug}.org" ":PROPERTIES:
;; :ROAM_ALIASES: %^{prompt}
;; :END:
;; ,#+TITLE: ${title}\n")
;;            :unnarrowed t)

          ;; TODO refactor this to normal org capture
          ("jk" "Japanese Kanji" plain "- tags :: [[roam:Japanese]]\n* Readings\n** onyomi %?\n** kunyomi"
           :if-new (file+head "${slug}.org" ":PROPERTIES:
:ROAM_ALIASES: %^{prompt}
:END:
,#+TITLE: ${title}\n")
           :unnarrowed t)

          ("t" "Test")
          ("tt" "Test test" plain "- tags :: %?\n* "
           :if-new (file+head "${slug}.org" "#+TITLE: ${title}\n")
           ;; :file-name (test-directory-string "testingbuhhNameDontMatter")
           ;; :file-name (test-directory-string "${slug}")
           ;; :file-name (test-directory-multiple "%y" "%m" "%d" "${slug}")
           :function (test-directory-multiple "y" "m" "d" "slug")
           ;; added a double space at the end for the double-space insert link issue.
           :head "#+TITLE: ${title}\n- tags ::  %?"
           :unnarrowed t)


          ("v" "Vispero")
          ("vv" "Vispero Default" plain (file ,dm--org-roam-default-template)
           :target (file ,(expand-file-name "${slug}.org" dm--org-roam-vispero-dir))
           :unnarrowed t)

          ("vt" "Vispero Tagged" plain (file ,dm--org-roam-vispero-tagged-template)
           :target (file ,(expand-file-name "${slug}.org" dm--org-roam-vispero-dir))
           :unnarrowed t)

          ("vp" "Vispero People" plain (file ,dm--org-roam-vispero-people-template)
           :target (file ,(expand-file-name "${slug}.org" dm--org-roam-vispero-dir))
           :unnarrowed t)

          ;; Need to add ":ROAM_REFS: http://bugzilla.fsi.local/show_bug.cgi?id=${slug}" to property
          ("vb" "Vispero Bug" plain "- tags :: [[roam:Vispero Bugzilla]] %?\n* Notes\n* Logging\n"
           :if-new (file+head "vispero/bugs/Bug ${slug}.org" ":PROPERTIES:
:ROAM_REFS: http://bugzilla.fsi.local/show_bug.cgi?id=${slug}
:END:
,#+TITLE: Bug ${title}\n#+filetags: :bug:\n")
           :unnarrowed t)
          ))

  (setq org-roam-capture-ref-templates
        `(("g" "general" plain (file ,dm--org-roam-ref-general-template)
           :target (file ,(expand-file-name "%(url-host (url-generic-parse-url \"${ref}\"))-${slug}.org" dm--org-roam-website-dir))
           :unnarrowed t)

        ("r" "review" plain "- tags :: [[roam:Vispero Swarm Reviews]] %?\n* TODO ${title}\nSCHEDULED: %^{Schedule}t"
           :if-new (file+head "vispero/reviews/${title}.org" ":PROPERTIES:
:ROAM_REFS: ${ref}
:END:
,#+TITLE: ${title} for %^{prompt}\n#+filetags: :review:\n")
           :unnarrowed t)

        ("b" "bug" plain "- tags :: [[roam:Vispero Bugzilla]] %?\n* ${title}\n** Notes\n"
           :if-new (file+head "vispero/bugs/${title}.org" ":PROPERTIES:
:ROAM_REFS: ${ref}
:END:
,#+TITLE: ${title}\n#+filetags: :bug:\n")
           :unnarrowed t)

;;         ("b" "bug" plain "- tags ::  [[roam:Vispero Bugzilla]] %?\n* Notes\n* Logging\n"
;;            :if-new (file+head "vispero/bugs/%(url-host (url-generic-parse-url \"${ref}\"))-${slug}.org" ":PROPERTIES:
;; :ROAM_REFS: ${ref}
;; :END:
;; ,#+TITLE: ${title}\n#+filetags: :bug:\n")
;;            :unnarrowed t)

  ;; (setq org-roam-capture-ref-templates
  ;;       '(("r" "ref" plain #'org-roam-capture--get-point "%?"
  ;;          :file-name "website/%(url-host (url-generic-parse-url \"${ref}\"))-${slug}"
  ;;          :head "#+TITLE: ${title}\n#+roam_key: ${ref}\n- tags ::  "
  ;;          :unnarrowed t))))


                        )))
#+end_src
** Old version 1
#+begin_src elisp :tangle no
        ;; Roam v1
        ;; '(("d" "default" plain (function org-roam--capture-get-point)
        ;;    ;; "%?"
        ;;    :file-name "${slug}"
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags ::  %?\n* "
        ;;    :unnarrowed t)

        ;;   ("a" "New Area" plain (function org-roam--capture-get-point)
        ;;    "%?"
        ;;    :file-name "${slug}"
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags :: [[file:../../../Dropbox/org/roam/indexes.org][Indexes]]"
        ;;    :unnarrowed t)

        ;;   ("r" "Reading General")
        ;;   ("rr" "Reading" plain (function org-roam--capture-get-point)
        ;;    :file-name "${slug}"
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags ::  %?\n* Notes\n* Overview"
        ;;    :unnarrowed t)

        ;;   ("rc" "Reading Character" plain (function org-roam--capture-get-point)
        ;;    :file-name "${slug}"
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags ::  %?\n* Notes\n* Mentions"
        ;;    :unnarrowed t)

        ;;   ("j" "Japanese")
        ;;   ("jj" "Japanese Vocabulary" plain (function org-roam--capture-get-point)
        ;;    :file-name "${slug}"
        ;;    :head "#+TITLE: ${title}\n#+roam_tags: %^{prompt}\n- tags :: [[file:../../../Dropbox/org/roam/japanese.org][Japanese]]\n* Definition"
        ;;    "%?"
        ;;    :unnarrowed t)

        ;;   ("jk" "Japanese Kanji" plain (function org-roam--capture-get-point)
        ;;    :file-name "${slug}"
        ;;    :head "#+TITLE: ${title}\n#+roam_tags: %^{prompt}\n- tags :: [[file:../../../Dropbox/org/roam/japanese.org][Japanese]]\n* Readings\n** onyomi %?\n** kunyomi"
        ;;    :unnarrowed t)

        ;;   ("t" "Test")
        ;;   ("tt" "Test test" plain (function org-roam--capture-get-point)
        ;;    ;; :file-name (test-directory-string "testingbuhhNameDontMatter")
        ;;    ;; :file-name (test-directory-string "${slug}")
        ;;    ;; :file-name (test-directory-multiple "%y" "%m" "%d" "${slug}")
        ;;    :function (test-directory-multiple "y" "m" "d" "slug")
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags ::  %?"
        ;;    :unnarrowed t)


        ;;   ("v" "Vispero")
        ;;   ("vv" "Vispero Default" plain (function org-roam--capture-get-point)
        ;;    :file-name "vispero/${slug}"
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags ::  %?"
        ;;    :unnarrowed t)
        ;;   ("vt" "Vispero Tagged" plain (function org-roam--capture-get-point)
        ;;    "%?"
        ;;    :file-name "vispero/${slug}"
        ;;    ;; added a double space at the end for the double-space insert link issue.
        ;;    :head "#+TITLE: ${title}\n- tags :: [[file:~/Dropbox/org/roam/vispero.org][Vispero]] "
        ;;    :unnarrowed t)
        ;;   ("vb" "Vispero Bug" plain (function org-roam--capture-get-point)
        ;;    :file-name "vispero/Bug ${slug}"
        ;;    :head "#+TITLE: Bug ${title}\n#+roam_key: http://bugzilla.fsi.local/show_bug.cgi?id=${slug}\n#+roam_alias: ${slug}\n- tags :: [[file:~/Dropbox/org/roam/vispero_bugzilla.org][Vispero Bugzilla]] \n"
        ;;    "%?"
        ;;    :unnarrowed t)
        ;;   ))
#+end_src
* Vulpea
- [[https://github.com/d12frosted/vulpea][GitHub]]
- A wrapper around org roam which adds extra functionality
#+begin_src elisp
(use-package! vulpea
  :ensure t
  ;; hook into org-roam-db-autosync-mode you wish to enable
  ;; persistence of meta values (see respective section in README to
  ;; find out what meta means)
  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))
#+end_src
** My version
#+begin_src elisp :tangle no
;; This replaces vulpea-project-files
(defun vulpea-agenda-files ()
  "Return a list of note files that are part of `org-agenda'."
  (seq-map
   #'vulpea-note-path
   (vulpea-db-query-by-tags-some '("project" "agenda" "vispero"))))

;; (defun vulpea-project-files ()
;;   "Return a list of note files that are part of `org-agenda'."
;;   (seq-map
;;    #'vulpea-note-path
;;    (vulpea-db-query-by-tags-some '("project"))))

;; (defun vulpea-agenda-files ()
;;   "Return a list of note files that are part of `org-agenda'."
;;   (seq-map
;;    #'vulpea-note-path
;;    (vulpea-db-query-by-tags-some '("agenda"))))

;; (defun vulpea-journal-files ()
;;   "Return a list of note files that are part of `org-agenda'."
;;   (seq-map
;;    #'vulpea-note-path
;;    (vulpea-db-query-by-tags-some '("journal"))))

;; This replaces vulpea-project-update-tag
(defun my-update-filetags ()
  "Update filetags in the current buffer."
  (when (and (not (active-minibuffer-window))
             (vulpea-buffer-p))
    (save-excursion
      (goto-char (point-min))
      (let* ((tags (vulpea-buffer-tags-get))
             (original-tags tags)
             (meta (vulpea-buffer-meta))
             (tags (vulpea-buffer-meta-get-list! meta "tags" 'link)))

        (if (vulpea-project-p)
            (setq tags (cons "project" tags))
          (setq tags (remove "project" tags)))

        ;; (if (seq-contains-p tags "[[id:c0a1e283-0329-4546-b391-18ac52099f01][Vispero]]")
        ;;     (setq tags (cons "vispero" tags))
        ;;   (setq tags (remove "vispero" tags)))

        ;; cleanup duplicates
        (setq tags (seq-uniq tags))

        ;; update tags if changed
        (when (or (seq-difference tags original-tags)
                  (seq-difference original-tags tags))
          (apply #'vulpea-buffer-tags-set tags))))))

;; Function to convert files to add a tag
;; But I don't know how to use
;; (defun my-update-files-with-tags ()
;; (interactive)
;; (seq-do
;;  (lambda (note)
;;    ;; do something with buffer visiting note
;;    (vulpea-utils-with-note note
;;      ;; just add a single tag (it handles duplication etc)
;;      (vulpea-buffer-tags-add "vispero")
;;      ;; save buffer
;;      (save-buffer)))
;;  (vulpea-db-query
;;   (lambda (note)
;;     (seq-contains-p
;;      (vulpea-note-meta-get-list
;;       note
;;       "tags"
;;       ;; you could use note here, but (a) it does unnecessary db
;;       ;; call and (b) all we care about is id
;;       'link)
;;      "[[id:c0a1e283-0329-4546-b391-18ac52099f01][Vispero]]")))))

(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (vulpea-agenda-files)))

(add-hook 'find-file-hook #'my-update-filetags)
(add-hook 'before-save-hook #'my-update-filetags)

(advice-add 'org-agenda :before #'vulpea-agenda-files-update)
(advice-add 'org-todo-list :before #'vulpea-agenda-files-update)
#+end_src

#+RESULTS:

** Required Vulpea functions
#+begin_src elisp
;; functions borrowed from `vulpea' library
;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el

(defun vulpea-buffer-tags-get ()
  "Return filetags value in current buffer."
  (vulpea-buffer-prop-get-list "filetags" "[ :]"))

(defun vulpea-buffer-tags-set (&rest tags)
  "Set TAGS in current buffer.
If filetags value is already set, replace it."
  (if tags
      (vulpea-buffer-prop-set
       "filetags" (concat ":" (string-join tags ":") ":"))
    (vulpea-buffer-prop-remove "filetags")))

(defun vulpea-buffer-tags-add (tag)
  "Add a TAG to filetags in current buffer."
  (let* ((tags (vulpea-buffer-tags-get))
         (tags (append tags (list tag))))
    (apply #'vulpea-buffer-tags-set tags)))

(defun vulpea-buffer-tags-remove (tag)
  "Remove a TAG from filetags in current buffer."
  (let* ((tags (vulpea-buffer-tags-get))
         (tags (delete tag tags)))
    (apply #'vulpea-buffer-tags-set tags)))

(defun vulpea-buffer-prop-set (name value)
  "Set a file property called NAME to VALUE in buffer file.
If the property is already set, replace its value."
  (setq name (downcase name))
  (org-with-point-at 1
    (let ((case-fold-search t))
      (if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                             (point-max) t)
          (replace-match (concat "#+" name ": " value) 'fixedcase)
        (while (and (not (eobp))
                    (looking-at "^[#:]"))
          (if (save-excursion (end-of-line) (eobp))
              (progn
                (end-of-line)
                (insert "\n"))
            (forward-line)
            (beginning-of-line)))
        (insert "#+" name ": " value "\n")))))

(defun vulpea-buffer-prop-set-list (name values &optional separators)
  "Set a file property called NAME to VALUES in current buffer.
VALUES are quoted and combined into single string using
`combine-and-quote-strings'.
If SEPARATORS is non-nil, it should be a regular expression
matching text that separates, but is not part of, the substrings.
If nil it defaults to `split-string-default-separators', normally
\"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
If the property is already set, replace its value."
  (vulpea-buffer-prop-set
   name (combine-and-quote-strings values separators)))

(defun vulpea-buffer-prop-get (name)
  "Get a buffer property called NAME as a string."
  (org-with-point-at 1
    (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                             (point-max) t)
      (buffer-substring-no-properties
       (match-beginning 1)
       (match-end 1)))))

(defun vulpea-buffer-prop-get-list (name &optional separators)
  "Get a buffer property NAME as a list using SEPARATORS.
If SEPARATORS is non-nil, it should be a regular expression
matching text that separates, but is not part of, the substrings.
If nil it defaults to `split-string-default-separators', normally
\"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
  (let ((value (vulpea-buffer-prop-get name)))
    (when (and value (not (string-empty-p value)))
      (split-string-and-unquote value separators))))

(defun vulpea-buffer-prop-remove (name)
  "Remove a buffer property called NAME."
  (org-with-point-at 1
    (when (re-search-forward (concat "\\(^#\\+" name ":.*\n?\\)")
                             (point-max) t)
      (replace-match ""))))
#+end_src
** Original
- This is the original implementation from [[https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html][d12frosted]]
#+begin_src elisp :tangle yes
;; (defun vulpea-project-p ()
;;   "Return non-nil if current buffer has any todo entry."
;;   (org-element-map
;;       (org-element-parse-buffer 'headline)
;;       'headline
;;     (lambda (h)
;;       (and (org-element-property :todo-type h)
;;            (not (org-element-property :archivedp h))))
;;            ;; (not (org-in-archived-heading-p h))))
;;            ;; (not (seq-contains-p (org-element-property :tags h)
;;            ;;                      "ARCHIVE"))))
;;     nil 'first-match))

(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (vulpea-project-p)
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
        :from tags
        :left-join nodes
        :on (= tags:node-id nodes:id)
        :where (like tag (quote "%\"project\"%"))]))))

;; Testing functions for debugging
;; (defun vulpea-project-files ()
;;   "Return a list of note files that are part of `org-agenda'."
;;   (seq-map
;;    #'vulpea-note-path
;;    (vulpea-db-query-by-tags-every '("project"))))

;; (org-roam-db-query
;;  [:select *
;;   :from tags
;;   :where (= node-id "905bd73e-2588-4b42-9a04-b8f69549ceb0")])

;; (org-roam-db-query
;;  [:select [id file title]
;;   :from nodes
;;   :where (= id "905bd73e-2588-4b42-9a04-b8f69549ceb0")])

;; (defun vulpea-agenda-files-update (&rest _)
;;   "Update the value of `org-agenda-files'."
;;   (setq org-agenda-files (vulpea-project-files)))
#+end_src
** Custom functions to see DONE files
#+begin_src elisp
(defun my/set-agenda-files-personal ()
  "Sets the org-agenda-files to personal non journal/dailies"
  (setq org-agenda-files (seq-filter (lambda(x) (not (string-match "/\\(vispero\\|journal\\|daily\\)/" (file-name-directory x))))
        (directory-files-recursively "~/Dropbox/org/roam" "\\.org$"))))

(defun my/set-agenda-files-vispero ()
  "Sets the org-agenda-files to Vispero non journal/dailies/bugs/reviews"
  (setq org-agenda-files (seq-filter (lambda(x) (not (string-match "/\\(journal\\|daily\\|bugs\\|reviews\\)/" (file-name-directory x))))
        (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$"))))

(defun my/set-agenda-files-all ()
  "Sets the org-agenda-files to everything except journal/dailies"
  (setq org-agenda-files (seq-filter (lambda(x) (not (string-match "/\\(journal\\|daily\\)/" (file-name-directory x))))
        (directory-files-recursively "~/Dropbox/org/roam" "\\.org$"))))

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (message "vulpea-agenda-files-updated called. Should ignore = %s" dm--ignore-vulpea-agenda-files-update-for-done-state)
  (if dm--ignore-vulpea-agenda-files-update-for-done-state
        (cond
                ((string-equal dm--my-focus "vispero") (funcall #'my/set-agenda-files-vispero))
                ((string-equal dm--my-focus "personal") (funcall #'my/set-agenda-files-personal))
                ((string-equal dm--my-focus "all") (funcall #'my/set-agenda-files-all))
                (t (funcall #'my/set-org-agenda-files-all)))
    (setq org-agenda-files (vulpea-project-files))))

(defvar dm--ignore-vulpea-agenda-files-update-for-done-state nil
  "If this is set to 't' org-agenda-files will be set to a custom filter on what I want to see for DONE org items. If nil, normally call what vulpea-agenda-files-update would use.")

(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)

(advice-add 'org-agenda :before #'vulpea-agenda-files-update)
(advice-add 'org-todo-list :before #'vulpea-agenda-files-update)

(defun my/org-agenda-view-all-done ()
  (interactive)
  (let ((dm--ignore-vulpea-agenda-files-update-for-done-state t))
    (org-agenda nil "Wd")))

(defun my/org-agenda-view-all-new-tags ()
  (interactive)
  (let ((dm--ignore-vulpea-agenda-files-update-for-done-state t))
    (org-agenda nil "Wn")))
#+end_src
** Automatic tagging people
#+begin_src elisp
(defun vulpea-ensure-filetag ()
"Add respective file tag if it's missing in the current note."
(interactive)
(let ((tags (vulpea-buffer-tags-get))
        (tag (vulpea--title-as-tag)))
    (when (and (seq-contains-p tags "people")
            (not (seq-contains-p tags tag)))
    (vulpea-buffer-tags-add tag))))

(defun vulpea--title-as-tag ()
"Return title of the current note as tag."
(vulpea--title-to-tag (vulpea-buffer-title-get)))

(defun vulpea--title-to-tag (title)
"Convert TITLE to tag."
(concat "@" (s-replace " " "" title)))

(defun vulpea-tags-add ()
  "Add a tag to current note."
  (interactive)
  ;; since https://github.com/org-roam/org-roam/pull/1515
  ;; `org-roam-tag-add' returns added tag, we could avoid reading tags
  ;; in `vulpea-ensure-filetag', but this way it can be used in
  ;; different contexts while having simple implementation.
  (when (call-interactively #'org-roam-tag-add)
    (vulpea-ensure-filetag)))

;; This doesn't work
;; (defun org-roam-node-insert-wrapper (fn)
;;   "Insert a link to the note using FN.

;; If inserted node has PEOPLE tag on it, tag the current outline
;; accordingly."
;;   (interactive)
;;   (when-let*
;;       ((node (funcall fn))
;;        (title (org-roam-node-title node))
;;        (tags (org-roam-node-tags node)))
;;     (when (seq-contains-p tags "people")
;;       (save-excursion
;;         (ignore-errors
;;           (org-back-to-heading)
;;           (org-set-tags
;;            (seq-uniq
;;             (cons
;;              (vulpea--title-to-tag title)
;;              (org-get-tags nil t)))))))))

;; (advice-add
;;  #'org-roam-node-insert
;;  :around
;;  #'org-roam-node-insert-wrapper)

(defun my-vulpea-insert-handle (note)
  "Hook to be called on NOTE after `vulpea-insert'."
  (when-let* ((title (vulpea-note-title note))
              (tags (vulpea-note-tags note)))
    (when (seq-contains-p tags "people")
      (save-excursion
        (ignore-errors
          (org-back-to-heading)
          (when (eq 'todo (org-element-property
                           :todo-type
                           (org-element-at-point)))
            (org-set-tags
             (seq-uniq
              (cons
               (vulpea--title-to-tag title)
               (org-get-tags nil t))))))))))

(add-hook 'vulpea-insert-handle-functions
          #'my-vulpea-insert-handle)
#+end_src
* Org visuals
** Org Superstar
Don't need anymore. It is included in org +pretty
#+begin_src elisp
;; (use-package org-superstar  ;; Improved version of org-bullets
;;   :ensure t
;;   :config
;;   (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src
** Org-fancy-priorities
Don't need anymore. It is included in org +pretty
#+begin_src elisp
;; (use-package org-fancy-priorities
;;   :ensure t
;;   :hook
;;   (org-mode . org-fancy-priorities-mode)
;;   :config
;;   (setq org-fancy-priorities-list '("❗" "⬆" "⬇" "☕")))



;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* Vertico
- Search and auto-complete
#+begin_src elisp
;; (after! vertico
;;   (setq vertico-sort-function 'vertico-sort-alpha))
#+end_src
* Key mappings
** General
#+begin_src elisp
(defun my/org-next-parent-heading ()
  "Jumps to the next parent heading."
    (interactive)
    (org-up-element)
    (org-forward-element))

;; Code completion to use TAB
(map! :after company
      :map company-active-map
      [tab] #'company-complete-selection)

(map! :leader
      "+" #'hydra/text-zoom/body
      ;; "W" #'+hydra/window-nav/body
      "W" #'my/hydra/window-nav/body
      "A" #'my/hydra/agenda-nav/body
      "w /" #'evil-window-vsplit
      "w -" #'evil-window-split
      "RET" #'org-insert-subheading
      "k" #'org-previous-visible-heading
      "K" #'outline-up-heading
      "j" #'org-next-visible-heading
      "J" #'my/org-next-parent-heading
      ;; "J" #'(lambda () (interactive) (call-interactively #'outline-up-heading) (call-interactively #'org/insert-item-below))
      ;; "J" #'(lambda () (interactive) (call-interactively #'outline-up-heading) (#'org/insert-item-below 1))
      "I" #'org-roam-insert
      :desc "Insert Immediate" "n r I" #'org-roam-node-insert-immediate
      :desc "Roam Refile Header" "n r !" #'org-roam-refile
      :desc "Journal Schedule View" "n j S" #'org-journal-schedule-view
      :desc "Journal Reschedule Scheduled Entry" "n j r" #'org-journal-reschedule-scheduled-entry
      ;; Org-roam-dailies key-remapping :
      :desc "Goto today" "n r d t" #'my/org-roam-dailies-goto-today
      :desc "Goto date" "n r d d" #'my/org-roam-dailies-goto-date
      :desc "Goto tomorrow" "n r d m" #'my/org-roam-dailies-goto-tomorrow
      :desc "Goto yesterday" "n r d y" #'my/org-roam-dailies-goto-yesterday
      )

;; Custom org-capture
(map! :leader
      :desc "Capture" "X" nil
      ;;:desc "test2" "X t" #'(lambda () (interactive) (call-interactively #'org-capture nil "t"))
      ;; :desc "test3" "X T" #'org-capture nil "t"
      :desc "ToDo" "X t" (cmd! (org-capture nil "t"))
      :desc "Scheduled ToDo" "X T" (cmd! (org-capture nil "T"))
      :desc "New Idea" "X i" (cmd! (org-capture nil "i"))
      :desc "Org Capture" "X X" #'org-capture
      :desc "Roam Capture" "X R" #'org-roam-capture
      ;; Journal/Dailies
      :desc "Goto Dailies" "X d" #'my/org-roam-dailies-goto-date
      :desc "Capture Dailies" "X D" #'org-roam-dailies-capture-date
      :desc "Journal" "X j" nil
      :desc "Journal Entry" "X j j" (cmd! (org-roam-dailies-capture-today nil "jj"))
      :desc "Journal ToDo" "X j t" (cmd! (org-roam-dailies-capture-today nil "jt"))
      ;; :desc "Journal Link" "X j l" (cmd! (org-roam-dailies-capture-today nil "jl"))
      :desc "Journal Link" "X j l" #'(lambda () (interactive) (call-interactively 'org-store-link) (org-roam-dailies-capture-today nil "jl"))
      )

;; Custom org-agenda
;; (map!
;;     :leader
;;     :prefix "A"
;;     :desc "Agenda" "A" #'org-agenda
;;     :desc "View DONE" "d" #'my/org-agenda-view-all-done
;;     :desc "View New" "n" #'my/org-agenda-view-all-new-tags
;;     :desc "Today" "t" (cmd! (org-agenda nil "t"))
;;     :desc "Open agenda file" "o" (cmd! (org-open-file +org-capture-todo-file))
;;       )

;; Make Tab to fold groups and Shift-Tab to default back to org-agenda-goto
(map! :after evil-org-agenda
      :map evil-org-agenda-mode-map
      :m [tab] #'origami-toggle-node
      :m [backtab] #'org-agenda-goto)

;; (map! :after org-journal
;;       :map org-journal-mode-map
;;       :localleader
;;       "c" 'nil
;;       )

;; (map!
;;  :after org-journal
;;  :map org-journal-mode-map
;;  :localleader
;;  (:prefix ("c" . "clock")
;;   "c" #'org-clock-cancel
;;   "l" #'+org/toggle-last-clock
;;   "i" #'org-clock-in
;;   "I" #'org-clock-in-last
;;   "o" #'org-clock-out
;;   "r" #'org-resolve-clocks
;;   "R" #'org-clock-report
;;   "t" #'org-evaluate-time-range
;;   ))

;; Adding to org-capture list
;; (map!
;;  :after org
;;  :map org-capture-mode-map
;;  ;; :localleader
;;  ;; (:prefix ("R" . "clock")
;;   "c" #'org-clock-cancel
;;   "l" #'+org/toggle-last-clock
;;   "i" #'org-clock-in
;;   "I" #'org-clock-in-last
;;   "o" #'org-clock-out
;;   "r" #'org-resolve-clocks
;;   "R" #'org-clock-report
;;   "t" #'org-evaluate-time-range
;;   )

;; Could instead set doom-localleader-key to ","
(map! :n "," (cmd! (push (cons t ?m) unread-command-events)
                   (push (cons t 32) unread-command-events)))

(map! :v "J" #'drag-stuff-down)
(map! :v "K" #'drag-stuff-up)

(map!
:leader
:prefix "f"
:desc "Find file in private config" "P" #'doom/find-file-in-private-config
:desc "Browse private config" "p" #'doom/open-private-config)

;; Harpoon keymaps
(map! :leader "l c" 'harpoon-clear)
(map! :leader "l f" 'harpoon-toggle-file)
(map! :n "C-s" 'harpoon-add-file)
(map! :n "C-SPC" 'harpoon-toggle-quick-menu)
(map! :leader "1" 'harpoon-go-to-1)
(map! :leader "2" 'harpoon-go-to-2)
(map! :leader "3" 'harpoon-go-to-3)
(map! :leader "4" 'harpoon-go-to-4)
(map! :leader "5" 'harpoon-go-to-5)
(map! :leader "6" 'harpoon-go-to-6)
(map! :leader "7" 'harpoon-go-to-7)
(map! :leader "8" 'harpoon-go-to-8)
(map! :leader "9" 'harpoon-go-to-9)

;; (map!
;;  :leader
;;  :prefix "X p"
;;  :desc "Project ToDo" "p")
;; (map! :localleader
;; "j j" #'(lambda () (interactive) (call-interactively) (outline-up-heading) (org/insert-item-below)))
;; "j j" #'(lambda () (interactive) (call-interactively #'outline-up-heading) (call-interactively #'org/insert-item-below))
;; "j k" #'outline-up-heading)
#+end_src
** Hydra keymaps
#+begin_src elisp
;; Personal window navigation
(defhydra my/hydra/window-nav (:hint nil)
  "
          Split: _-_/_v_ert  _/_/_s_:horz
         Delete: _c_lose  _o_nly
  Switch Window: _h_:left  _j_:down  _k_:up  _l_:right  _U_:undo  _R_:redo
    Move Window: _H_:left  _J_:down  _K_:up  _L_:right
        Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file  _p_roject
         Resize: _y_:splitter left  _u_:splitter down  _i_:splitter up  _o_:splitter right
         Scroll: _a_:up  _z_:down
     Workspaces: _1_  _2_  _3_  _4_  _5_  _N_ew  _D_elete
"
  ("z" scroll-up-line)
  ("a" scroll-down-line)

  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("U" winner-undo)
  ("R" winner-redo)

  ("H" +evil/window-move-left)
  ("J" +evil/window-move-down)
  ("K" +evil/window-move-up)
  ("L" +evil/window-move-right)

  ("p" previous-buffer)
  ("n" next-buffer)
  ("b" switch-to-buffer)
  ("f" find-file)
  ("p" projectile-switch-project)

  ("s" split-window-below)
  ("-" split-window-below)
  ("v" split-window-right)
  ("/" split-window-right)

  ("c" delete-window)
  ("o" delete-other-windows)

  ("y" hydra-move-splitter-left)
  ("u" hydra-move-splitter-down)
  ("i" hydra-move-splitter-up)
  ("o" hydra-move-splitter-right)

  ("1" +workspace/switch-to-0)
  ("2" +workspace/switch-to-1)
  ("3" +workspace/switch-to-2)
  ("4" +workspace/switch-to-3)
  ("5" +workspace/switch-to-4)
  ("D" +workspace/delete)
  ("N" +workspace/new)

  ("q" nil))

;; Personal agenda view
(defhydra my/hydra/agenda-nav (:hint nil
                               :exit t)
"
Current focus : %`dm--my-focus
"
  ("A" org-agenda "Org Agenda")
  ("q" nil "Quit")
  ("1" my/org-focus-personal "Personal ":exit nil :column "Focus")
  ("2" my/org-focus-vispero "Vispero ":exit nil :column "Focus")

  ("t" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "t")))
   "Today" :column "Agenda Views")
  ("w" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "w")))
   "Week" :column "Agenda Views")
  ("b" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "b")))
   "2 Weeks" :column "Agenda Views")
  ("m" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "m")))
   "Month" :column "Agenda Views")
  ("y" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "y")))
   "Year" :column "Agenda Views")

  ("W" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "pw")))
   "Planning week" :column "Planning")
  ("M" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "pm")))
   "Planning month" :column "Planning")

  ("d" my/org-agenda-view-all-done "All 'DONE'" :column "Misc")
  ("n" my/org-agenda-view-all-new-tags "All 'new'" :column "Misc")
  ("o" (lambda()
         (interactive)
         (call-interactively (org-open-file +org-capture-todo-file)))
   "Open agenda file" :column "Misc")
)
#+end_src
*** Example with automatic columns
#+begin_src elisp :tangle no
(defhydra my/hydra/agenda-nav (:hint nil
                               :exit t)
"
Testing something %`dm--my-focus
"
  ("1" my/org-focus-personal "Focus personal" :exit nil :column "Vertical")
  ("2" my/org-focus-vispero "Focus Vispero" :exit nil :column "Vertical")
  ;; ("3" (cmd! (org-agenda nil "t")))
  ("3" (lambda()
         (interactive)
         (call-interactively (org-agenda nil "t")))
   "Today" :column "Test")

  ("4" my/org-focus-vispero "Focus Vispero" :exit nil :column "Horizontal")
  ("5" my/org-focus-vispero "Focus Vispero" :exit nil :column "Test")
  ("6" my/org-focus-vispero "Focus Vispero" :exit nil)

  ("q" nil))
#+end_src
* Unused functions
** Checkbox attempts
#+begin_src elisp :tangle no
;;Reset checkboxes from Rainer
(defun org-reset-checkbox-state-maybe ()
  "Reset all checkboxes in an entry if the `RESET_CHECK_BOXES' property is set"
  (interactive "*")
  (if (org-entry-get (point) "RESET_CHECK_BOXES")
      (org-reset-checkbox-state-subtree)))

(defun org-checklist ()
  (when (member org-state org-done-keywords) ;; org-state dynamically bound in org.el/org-todo
    (org-reset-checkbox-state-maybe)))

(add-hook 'org-after-todo-state-change-hook 'org-checklist)

;;new attempt
(defun glasser-org-reset-check-on-repeat ()
  (when (and (org-get-repeat) (member org-state org-done-keywords))
    (org-reset-checkbox-state-subtree)))
(add-hook 'org-after-todo-state-change-hook 'glasser-org-reset-check-on-repeat)
#+end_src
* Swap focuses
Functions used to swap focuses between personal and work.
#+begin_src elisp
(defun my/org-focus-personal()
  (interactive)
  (setq dm--my-focus "personal")
   ;; org-agenda-files (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
   ;;                                           (directory-files-recursively "~/Dropbox/org/roam" "\\.org$"))
        ;;+org-capture-todo-file dm--org-personal-inbox-file-name)
        ;; org-roam-dailies-directory "daily")
  (my/call-focus-function-setters))

(defun my/org-focus-vispero()
  (interactive)
  (setq dm--my-focus "vispero")
   ;; org-agenda-files (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$")
        ;; +org-capture-todo-file dm--org-vispero-inbox-file-name)
        ;; org-roam-dailies-directory "vispero/daily")
  (my/call-focus-function-setters))

(defun my/call-focus-function-setters ()
  "Reset templates to their new values"
  (my/set-org-variables)
  (my/set-org-roam-dailies-capture)
  (my/set-org-capture-templates))

;; Old journal method:
;; (defun my/org-focus-personal()
;;   (interactive)
;;   (setq org-agenda-files (append (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
;;                                              (directory-files-recursively "~/Dropbox/org/roam" "\\.org$")) (directory-files-recursively "~/Dropbox/org/roam/journal" "\\.org$"))
;;         +org-capture-todo-file "~/Dropbox/org/roam/personal_agenda.org"
;;         ))

;; (defun my/org-focus-work()
;;   (interactive)
;;   (setq org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/roam/vispero/journal" "\\.org$"))
;;         +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
;;         ))
#+end_src
* Personal Machine
#+begin_src elisp :tangle (if (eq (doom-system-distro) 'arch) "config.el" "no")
(setq dm--my-focus "personal")
;; (after! org-roam
;;     (setq +org-capture-todo-file dm--org-personal-inbox-file-name))

;; (after! org-journal
    (setq org-journal-dir "~/Dropbox/org/roam/daily"
        ;; org-agenda-files (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
        ;;                              (directory-files-recursively "~/Dropbox/org" "\\.org$"))

        org-journal-date-format "%A, %d %B %Y"
        ;; org-agenda-files 'personal-agenda-files
        org-journal-file-header ":PROPERTIES:\n:ROAM_ALIASES: \"Personal %A, %B %d %Y\"\n:END:\n#+TITLE: Personal %Y-%m-%d\n"
        org-journal-file-type 'daily
        org-journal-file-format "Personal %Y-%m-%d.org"
        )
;;)

;; This works!
;; (defun my/org-roam-daily-test()
;;   (interactive)
;;   (org-roam-dailies-capture-today nil "t"))
;; (global-set-key (kbd "<f3>") 'my/org-roam-daily-test)



;; (after! org-roam

;;     )

;;   (setq org-roam-dailies-capture-templates
;;         ;; Testing new template system
;;         (let ((head
;;             (with-temp-buffer
;;                 ;; (insert-file-contents dm--org-personal-daily-template)
;;               (cond ((string-equal dm--my-focus "vispero") (insert-file-contents dm--org-vispero-daily-template))
;;                     (t (insert-file-contents dm--org-personal-daily-template)))
;;                 (buffer-string))))
;;           ;; Backtick list
;;         `(("d" "default" plain "%?"
;;            :target (file+head "Personal %<%Y-%m-%d>.org" ,dm/get-daily-template)
;;            :unarrowed t)
;;           ("j" "journal" entry "** %<%H:%M> %?"
;;            :target (file+head+olp "Personal %<%Y-%m-%d>.org" ,head ("Journal")))
;;           ("t" "ToDo" item "[ ] %?"
;;            :target (file+head+olp "Personal %<%Y-%m-%d>.org" ,head ("Test"))))

;;         ;; '(("d" "default" entryy ""
;;         ;;    :target (file+head "Personal %<%Y-%m-%d>.org" ":PROPERTIES:\n:ROAM_ALIASES: \"Personal %<%A, %B %d %Y>\"\n:END:\n#+TITLE: Personal %<%Y-%m-%d>\n* %<%A, %d %B %Y>\n")
;;         ;;    :unarrowed t)

;; ;;   (setq org-roam-dailies-capture-templates
;; ;;         '(("d" "default" entry "** %?"
;; ;;            :target (file+head "Personal %<%Y-%m-%d>.org" ":PROPERTIES:
;; ;; :ROAM_ALIASES: \"Personal %<%A, %B %d %Y>\"
;; ;; :END:
;; ;; ,#+TITLE: Personal %<%Y-%m-%d>\n* %<%A, %d %B %Y>\n")
;; ;;            :prepend nil
;; ;;            :unarrowed nil)
;;           )))

;; (setq org-journal-dir "~/Dropbox/org/roam/journal"
;;       ;; org-agenda-files (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
;;       ;;                              (directory-files-recursively "~/Dropbox/org" "\\.org$"))

;;       org-journal-date-format "%A, %d %B %Y\n"
;;       +org-capture-todo-file "~/Dropbox/org/roam/personal_agenda.org"
;;       ;; org-agenda-files 'personal-agenda-files
;;       org-journal-file-type 'monthly
;;       org-journal-file-format "Journal %Y-%m.org"
;;       )

(setq doom-font (font-spec :family "Fira Code Retina" :size 15)
      doom-variable-pitch-font (font-spec :family "JuliaMono Medium" :size 15)
      doom-big-font (font-spec :family "Fira Code Retina" :size 24))

;; (after! org-agenda
;; (setq org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam" "\\.org$"))))

;; (after! org-agenda
;;     (setq org-agenda-files (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
;;                                             (directory-files-recursively "~/Dropbox/org/roam" "\\.org$"))))

;; (setq org-agenda-files (append (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
;;                                            (directory-files-recursively "~/Dropbox/org/roam" "\\.org$")) (directory-files-recursively "~/Dropbox/org/roam/journal" "\\.org$")))



(defun test-directory-string (file-path)
  (concat "testDirectory/" file-path))

(defun test-directory-multiple (a b c d)
  (concat "testDirectory/" a b c d))
#+end_src
** mu4e
#+begin_src elisp :tangle (if (eq (doom-system-distro) 'arch) "config.el" "no")
;; (setq user-mail-address "dominikmendel95@gmail.com"
;;       user-full-name  "Dominik Mendel"
      ;; I have my mbsyncrc in a different folder on my system, to keep it separate from the
      ;; mbsyncrc available publicly in my dotfiles. You MUST edit the following line.
      ;; Be sure that the following command is: "mbsync -c ~/.config/mu4e/mbsyncrc -a"

;; (setq mu4e-compose-org-msg-toggle-next nil)

(after! mu4e

  ;; Lastly added the "Default smtp" to try and help.
    (set-email-account! "Gmail"
    '((mu4e-sent-folder       . "/Gmail/[Gmail]/Sent Mail")
        (mu4e-drafts-folder     . "/Gmail/[Gmail]/Drafts")
        (mu4e-trash-folder      . "/Gmail/[Gmail]/Trash")
        (mu4e-refile-folder     . "/Gmail/[Gmail]/All Mail")
        (smtpmail-smtp-user     . "dominikmendel95@gmail.com")
        (smtpmail-smtp-server  . "smtp.gmail.com")
        (smtpmail-default-smtp-server  . "smtp.gmail.com")
        (smtpmail-smtp-service . 465)
        (smtpmail-stream-type  . ssl)
        (user-mail-address      . "dominikmendel95@gmail.com")    ;; only needed for mu < 1.4
        (mu4e-compose-signature . "Dominik Mendel"))
    t)

    (set-email-account! "Dominik@Mendel.family"
    '((mu4e-sent-folder       . "/Dominik-Mendel/Sent")
        (mu4e-drafts-folder     . "/Dominik-Mendel/Drafts")
        (mu4e-trash-folder      . "/Dominik-Mendel/Trash")
        (mu4e-refile-folder     . "/Dominik-Mendel/All Mail")
        (smtpmail-smtp-user     . "dominik@mendel.family")
        (smtpmail-smtp-server  . "smtp.migadu.com")
        (smtpmail-default-smtp-server  . "smtp.migadu.com")
        (smtpmail-smtp-service . 465)
        (smtpmail-stream-type  . ssl)
        (user-mail-address      . "dominik@mendel.family")    ;; only needed for mu < 1.4
        (mu4e-compose-signature . "Dominik Mendel"))
    t)

    (setq
        mu4e-get-mail-command "mbsync -c ~/.config/mu4e/mbsyncrc -a"
        mu4e-update-interval  300
        mu4e-main-buffer-hide-personal-addresses t
        message-send-mail-function 'smtpmail-send-it
        mu4e-compose-format-flowed t
        mu4e-change-filenames-when-moving t

        mu4e-maildir-shortcuts
          '((:maildir "/Dominik-Mendel/Inbox" :key ?I :hide-unread t)
            (:maildir "/Dominik-Mendel/Sent" :key ?S :hide-unread t)
            (:maildir "/Dominik-Mendel/spam" :key ?p :hide-unread nil)
            (:maildir "/Gmail/Inbox" :key ?i :hide-unread t)
            (:maildir "/Gmail/[Gmail]/Sent Mail" :key ?s :hide-unread t))

        mu4e-bookmarks
        '((:name "Sent Dom"
            :query "maildir:/Dominik-Mendel/ and testing"
            :key ?d)
        (:name  "Unread messages"
            :query "flag:unread AND NOT flag:trashed"
            :key ?u)
        (:name "Today's messages"
            :query "date:today..now"
            :key ?t)
        (:name "Last 7 days"
            :query "date:7d..now"
            :hide-unread t
            :key ?w)
        (:name "Messages with images"
            :query "mime:image/*"
            :key ?p))

        ;; mu4e-maildir-shortcuts
        ;; '(("Gmail/Inbox"             . ?i)
        ;;     ("/Gmail/[Gmail]/Sent Mail" . ?s)
        ;;     ("/Gmail/[Gmail]/Trash"     . ?t)
        ;;     ("/Gmail/[Gmail]/Drafts"    . ?d)
        ;;     ("/Gmail/[Gmail]/All Mail"  . ?a))

                        ))

        ;;starttls-use-gnutls t
        ;;smtpmail-starttls-credentials '(("smtp.1and1.com" 587 nil nil))

        ;; mu4e-contexts
        ;;     (list
        ;;     ;; Gmail account
        ;;     (make-mu4e-context
        ;;     :name "Gmail"
        ;;     :match-func
        ;;         (lambda (msg)
        ;;         (when msg
        ;;             (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
        ;;     :vars '((user-mail-address . "dominikmendel@gmail.com")
        ;;             (user-full-name    . "Dominik Mendel")
        ;;             (smtpmail-smtp-server  . "smtp.gmail.com")
        ;;             (smtpmail-smtp-service . 465)
        ;;             (smtpmail-stream-type  . ssl)
        ;;             (mu4e-compose-signature . "Dominik Mendel")
        ;;             (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
        ;;             (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
        ;;             (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
        ;;             (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))

        ;;     ;; Personal account
        ;;     (make-mu4e-context
        ;;     :name "Dominik Mendel"
        ;;     :match-func
        ;;         (lambda (msg)
        ;;         (when msg
        ;;             (string-prefix-p "/Dominik-Mendel" (mu4e-message-field msg :maildir))))
        ;;     :vars '((user-mail-address . "dominik@mendel.family")
        ;;             (user-full-name    . "Dominik Mendel")
        ;;             (smtpmail-smtp-server  . "smtp.migadu.com")
        ;;             (smtpmail-smtp-service . 465)
        ;;             (smtpmail-stream-type  . ssl)
        ;;             (mu4e-compose-signature . "Dominik Mendel")
        ;;             (mu4e-drafts-folder  . "/Dominik-Mendel/Drafts")
        ;;             (mu4e-sent-folder  . "/Dominik-Mendel/Sent")
        ;;             (mu4e-refile-folder  . "/Dominik-Mendel/Archive")
        ;;             (mu4e-trash-folder  . "/Dominik-Mendel/Trash"))))

        ;; mu4e-sent-folder "/account-1/Sent"
        ;; mu4e-drafts-folder "/account-1/Drafts"
        ;; mu4e-trash-folder "/account-1/Trash"
        ;; mu4e-maildir-shortcuts
        ;; '(("/account-1/Inbox"      . ?i)
        ;;   ("/account-1/Sent Items" . ?s)
        ;;   ("/account-1/Drafts"     . ?d)
        ;;   ("/account-1/Trash"      . ?t)))
#+end_src
* Work machine
- You cannot put "\n\n" in org-journal-date format. It will cause your first entry to be on the previous date.
  + However, now your first entry appears to be on the same line as your header, it isn't an is a visual bug at first.
#+begin_src elisp :tangle (if (eq (doom-system-distro) 'ubuntu) "config.el" "no")
(setq dm--my-focus "vispero")
;; (setq org-roam-dailies-directory "vispero/daily")
;; (setq +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org")
;; (after! org-agenda
        ;; org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$"))
        ;; )

(setq org-journal-dir "~/Dropbox/org/roam/vispero/daily"
      ;; org-journal-date-format "%A, %d %B %Y\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n:END:\n"
      org-journal-date-format "%A, %d %B %Y"
      org-journal-file-header ":PROPERTIES:
:ROAM_ALIASES: \"Vispero %A, %B %d %Y\"
:END:
:CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %Y-%m-%d :maxlevel 9 :fileskip0 t\n#+END:\n:END:\n#+TITLE: Vispero %Y-%m-%d"
      org-journal-file-type 'daily
      org-journal-file-format "Vispero %Y-%m-%d.org"
      )

(after! org-roam
    ;; (setq +org-capture-todo-file dm--org-vispero-inbox-file-name)
;;   (setq org-roam-dailies-capture-templates
;;         '(("d" "default" entry "** %?"
;;            :target (file+head "Vispero %<%Y-%m-%d>.org" ":PROPERTIES:
;; :ROAM_ALIASES: \"Vispero %<%A, %B %d %Y>\"
;; :END:
;; :CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %<%Y-%m-%d> :maxlevel 9 :fileskip0 t\n#+END:\n:END:\n#+TITLE: Vispero %<%Y-%m-%d>\n* %<%A, %d %B %Y>\n")

;; ;; (defun my/testing-vispero (tag-name)
;; ;;   (lambda (node)
;; ;;     (memeber tag-name (my/org-roam-filter-by-tag "vispero"))))

;; ;; (defun my/testing-vispero-tag (tag-name)
;; ;;   (lambda (node)
;; ;;     (member tag-name (org-roam-node-tags node))))

;;           ;; ("t" "testing" entry "* %?"
;;           ;;  :target (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n"))
;;           )))

;; (setq some-vispero-variable "vispero/")
(defun some-vispero-variable () (substring "vispero/" 0))

(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  ;;(add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "project"))
                     :templates '(("p" "project" plain "** TODO %?"
                                   :if-new (file+head+olp "vispero/${slug}.org"
                                   ;; :if-new (file+head+olp "${some-vispero-variable}${slug}.org"
                                                          "#+TITLE: ${title}\n#+filetags: project\n- tags :: [[roam:Vispero]] \n* Tasks\n** ARCHIVE :ARCHIVE:\n* Notes"
                                                          ("Tasks"))))))
           :prepend nil)



;; (setq +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
;;       org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/roam/vispero/daily" "\\.org$")))
;; Old daily journals (unfinished)
;; (setq org-journal-dir "~/Dropbox/org/roam/vispero/journal"
;;       org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/roam/vispero/journal" "\\.org$"))
;;       ;; org-journal-date-format "%A, %d %B %Y\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n:END:\n"
;;       org-journal-date-format "%A, %d %B %Y\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %Y-%m-%d :maxlevel 9\n#+END:\n:END:\n"
;;       org-journal-file-header "#+TITLE: Vispero Journal %A %m %d %Y\n#+STARTUP: showeverything\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %Y-%m-%d :maxlevel 9\n#+END:\n:END:\n"
;;       org-journal-file-type 'daily
;;       org-journal-file-format "%Y/%B/Vispero Journal %A %m-%d-%Y.org"
;;       +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
;;       )

;; Old weekly journals
;; (setq org-journal-dir "~/Dropbox/org/roam/vispero/journal"
;;       org-agenda-files (append (directory-files-recursively "~/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "~/Dropbox/org/roam/vispero/journal" "\\.org$"))
;;       ;; org-journal-date-format "%A, %d %B %Y\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n:END:\n"
;;       org-journal-date-format "%A, %d %B %Y\n:CLOCKTABLE:\n#+BEGIN: clocktable :scope vispero-roam :block %Y-%m-%d :maxlevel 9\n#+END:\n:END:\n"
;;       ;; org-journal-file-header "#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:"
;;       org-journal-file-type 'weekly
;;       org-journal-file-format "%Y/Vispero Journal %W_%m-%d.org"
;;       +org-capture-todo-file "~/Dropbox/org/roam/vispero/vispero_agenda.org"
;;       )

(setq doom-font (font-spec :family "Fira Code" :size 15)
      doom-variable-pitch-font (font-spec :family "Fira Code" :size 15)
      doom-big-font (font-spec :family "Fira Code" :size 24))
;; For journal testing
;; (setq! org-journal-dir "/home/dominik/Dropbox/org/visperoJournal"
;;       org-agenda-files (append (directory-files-recursively "/home/dominik/Dropbox/org/roam/vispero" "\\.org$") (directory-files-recursively "/home/dominik/Dropbox/org/visperoJournal" "\\.org$"))
;;       org-journal-date-format "%A, %d %B %Y\n#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n"
;;       org-journal-file-type 'weekly
;;       org-journal-file-format "%Y_%W_%m-%d.org"
;;       +org-capture-todo-file "/home/dominik/Dropbox/org/roam/vispero/vispero_agenda.org"
;;       )

;; (defun org-journal-file-header-func (time)
;;   "Custom function to create journal header."
;;   (concat
;;    (pcase org-journal-file-type
;;      (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
;;      (`weekly "#+BEGIN: clocktable :scope subtree :maxlevel 9\n#+END:\n")
;;      (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
;;      (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))

;; (setq org-journal-file-header 'org-journal-file-header-func)
#+end_src
* Testing functionality
#+begin_src elisp :tangle no
(defun do-nothing-carry-over (old_entries))
(setq org-journal-handle-old-carryover 'do-nothing-carry-over
      org-journal-skip-carryover-drawers (list "CLOCKING"))

;; This doesn't work. Need to add more parameters to satisfy defcustom
(defcustom personal-agenda-files (append (seq-filter (lambda(x) (not (string-match "/vispero/"(file-name-directory x))))
                                                     (directory-files-recursively "~/Dropbox/org/roam" "\\.org$")) (directory-files-recursively "~/Dropbox/org/journal" "\\.org$")))
#+end_src
* Things to add
** A way to make all roam captures go to vispero directory if on work PC
- Can make the captures the same but instead reference some variable directory
  + Then have the OS version tangles just change that variable
** Make org directory and org roam directory for work go straight to the vispero path
*** :file-name cannot run a function I think
** Make a bug + swarmzilla hyperlink type
** Figure out the org-journal-handle-old-carryover
- Add a "tag" to the journal carry over = NOT "old"
- Add the logic from the org-journal documentation to tag old entries as "old"
  + Then just figure out some way to skip anything tagged "old"
  + Need to make sure not to remove the old tags like "bluetooth" when doing so
- Can maybe move away from using TODO states in journal and just use tags of the same representation
  + This would mean that if I want an item to be carry overed it would tag it with "inprogress" instead of marking it with a todo state
